usePrologVariables: false.
setParam: maxTreeDepth=3.
setParam: nodeSize=2.
setParam: numOfClauses=4.
setParam: numOfCycles=4.
setParam: minLCTrees=5;
setParam: incrLCTrees=5;


setParam: loadAllBasicModes=false.
setParam: loadAllLibraries=false.



queryPred: samebib/2.
queryPred: sametitle/2.
queryPred: samevenue/2.
queryPred: sameauthor/2.

mode: author(+paper, -auth).
mode: haswordauthor(+auth, -word).
mode: haswordtitle(+title, -word).
mode: haswordvenue(+venue, -word).
mode: title(+paper, -title).
mode: venue(+paper, -venue).

mode: author(-paper, +auth).
mode: haswordauthor(-auth, +word).
mode: haswordtitle(-title, +word).
mode: haswordvenue(-venue, +word).
mode: title(-paper, +title).
mode: venue(-paper, +venue).

mode: samebib(+paper, +paper).
mode: sametitle(+title, +title).
mode: samevenue(+venue, +venue).
mode: sameauthor(+auth, +auth).

mode: recursive_samebib(+paper, `paper).
mode: recursive_sametitle(+title, `title).
mode: recursive_samevenue(+venue, `venue).
mode: recursive_sameauthor(+auth, `auth).

mode: recursive_samebib(`paper, +paper).
mode: recursive_sametitle(`title, +title).
mode: recursive_samevenue(`venue, +venue).
mode: recursive_sameauthor(`auth, +auth).

mode: samebib(+paper, -paper).
mode: sametitle(+title, -title).
mode: samevenue(+venue, -venue).
mode: sameauthor(+auth, -auth).

mode: samebib(-paper, +paper).
mode: sametitle(-title, +title).
mode: samevenue(-venue, +venue).
mode: sameauthor(-auth, +auth).

usePrologVariables: true.
okIfUnknown: recursive_sametitle/2.
okIfUnknown: recursive_samebib/2.
okIfUnknown: recursive_samevenue/2.
okIfUnknown: recursive_sameauthor/2.

/*
mode: has_more_than_n_common_words_author(+auth, +auth, #int).
mode: has_more_than_n_common_words_title(+title, +title, #int).
mode: has_more_than_n_common_words_venue(+venue, +venue, #int).
mode: bib_has_more_than_n_common_words_author(+paper, +paper, #int).
mode: bib_has_more_than_n_common_words_title(+paper, +paper, #int).
mode: bib_has_more_than_n_common_words_venue(+paper, +paper, #int).

mode: common_word_author(+author, +author, #count).
mode: common_word_title(+title, +title, #count).
mode: common_word_venue(+venue, +venue, #count).

mode: has_n_common_words_author(+author, +author, #count).
mode: has_n_common_words_title(+title, +title, #count).
mode: has_n_common_words_venue(+venue, +venue, #count).

mode: bib_has_n_common_words_author(+paper, +paper, #count).
mode: bib_has_n_common_words_title(+paper, +paper, #count).
mode: bib_has_n_common_words_venue(+paper, +paper, #count).




usePrologVariables: true.
precompute:
common_word_author(A1,A2,W) :- haswordauthor(A1, W), haswordauthor(A2,W), A1 \= A2, W \= word_test.
precompute:
common_word_title(A1,A2,W) :- haswordtitle(A1, W), haswordtitle(A2,W), A1 \= A2, W \= word_test.
precompute:
common_word_venue(A1,A2,W) :- haswordvenue(A1, W), haswordvenue(A2,W), A1 \= A2, W \= word_test.

precompute1: 
has_n_common_words_author(A1, A2, N) :- common_word_author(A1,A2,W), all(Word, common_word_author(A1,A2,Word), AllWords),  N is length(AllWords).

precompute1: 
has_n_common_words_title(A1, A2, N) :- common_word_title(A1,A2,W), all(Word, common_word_title(A1,A2,Word), AllWords),  N is length(AllWords).

precompute1: 
has_n_common_words_venue(A1, A2, N) :- common_word_venue(A1,A2,W), all(Word, common_word_venue(A1,A2,Word), AllWords),  N is length(AllWords).

precompute2: 
bib_has_n_common_words_author(P1, P2, N) :- author(P1,A11),author(P2,A22), has_n_common_words_author(A11,A22,Num12), all(Num,  author(P1,A1)^author(P2,A2)^has_n_common_words_author(A1,A2,Num), AllWords),  addList(AllWords,N).

precompute2: 
bib_has_n_common_words_venue(P1, P2, N) :- venue(P1,A11),venue(P2,A22), has_n_common_words_venue(A11,A22,Num12), all(Num,  venue(P1,A1)^venue(P2,A2)^has_n_common_words_venue(A1,A2,Num), AllWords),  addList(AllWords,N).

precompute2: 
bib_has_n_common_words_title(P1, P2, N) :- title(P1,A11),title(P2,A22), has_n_common_words_title(A11,A22,Num12), all(Num,  title(P1,A1)^title(P2,A2)^has_n_common_words_title(A1,A2,Num), AllWords),  addList(AllWords,N).

precompute3:
has_more_than_n_common_words_author(A1,A2,N) :-
 	        has_n_common_words_author(A1, A2, N2),
		member(N,[1,2,3,4,5]),
		        N2 > N.

precompute3:
bib_has_more_than_n_common_words_author(A1,A2,N) :-
 	        bib_has_n_common_words_author(A1, A2, N2),
		member(N,[1,2,3,4,5]),
		        N2 > N.


precompute3:
has_more_than_n_common_words_title(A1,A2,N) :-
 	        has_n_common_words_title(A1, A2, N2),
		member(N,[1,2,3,4,5]),
		        N2 > N.

precompute3:
bib_has_more_than_n_common_words_title(A1,A2,N) :-
 	        bib_has_n_common_words_title(A1, A2, N2),
		member(N,[1,2,3,4,5]),
		        N2 > N.

precompute3:
has_more_than_n_common_words_venue(A1,A2,N) :-
 	        has_n_common_words_venue(A1, A2, N2),
		member(N,[1,2,3,4,5]),
		        N2 > N.

precompute3:
bib_has_more_than_n_common_words_venue(A1,A2,N) :-
 	        bib_has_n_common_words_venue(A1, A2, N2),
		member(N,[1,2,3,4,5]),
		        N2 > N.


*/
