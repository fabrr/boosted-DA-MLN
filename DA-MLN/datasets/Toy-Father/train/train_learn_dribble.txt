% Running on host: DESKTOP-0S2LA4F

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[datasets\Toy-Father\train/train_pos.txt, datasets\Toy-Father\train/train_neg.txt, datasets\Toy-Father\train/train_bk.txt, datasets\Toy-Father\train/train_facts.txt]
%  for N=0: args[N]=datasets\Toy-Father\train/train_pos.txt

% getInputArgWithDefaultValue: args=[datasets\Toy-Father\train/train_pos.txt, datasets\Toy-Father\train/train_neg.txt, datasets\Toy-Father\train/train_bk.txt, datasets\Toy-Father\train/train_facts.txt]
%  for N=1: args[N]=datasets\Toy-Father\train/train_neg.txt

% getInputArgWithDefaultValue: args=[datasets\Toy-Father\train/train_pos.txt, datasets\Toy-Father\train/train_neg.txt, datasets\Toy-Father\train/train_bk.txt, datasets\Toy-Father\train/train_facts.txt]
%  for N=2: args[N]=datasets\Toy-Father\train/train_bk.txt

% getInputArgWithDefaultValue: args=[datasets\Toy-Father\train/train_pos.txt, datasets\Toy-Father\train/train_neg.txt, datasets\Toy-Father\train/train_bk.txt, datasets\Toy-Father\train/train_facts.txt]
%  for N=3: args[N]=datasets\Toy-Father\train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 41 facts.
% Have read 5 examples from 'datasets\Toy-Father\train' [datasets\Toy-Father\train/train*].
% Have read 21 examples from 'datasets\Toy-Father\train' [datasets\Toy-Father\train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 father(D, E)
%  targetPred:                father/2
%  targetArgTypes:            signature = [const, const], types = [+name, +name]
%  targets:                   [father(D, E)]
%  targetPredicates:          [father/2]
%  targetArgSpecs:            [[D[+name], E[+name]]]
%  variablesInTargets:        [[D, E]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 5 milliseconds
% Time to collect examples: 0 seconds

% Read 5 pos examples and 21 neg examples.
% Time to init learnOneClause: 22 milliseconds
% Old dirnull
Setting model dir

% Have 5 'raw' positive examples and kept 5.
% Have 21 'raw' negative examples and kept 21.

% processing backup's for father
%  POS EX = 5
%  NEG EX = 21

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
datasets\Toy-Father\train/models/
File: datasets\Toy-Father\train/advice.txt doesnt exist.Hence no advice loaded
% Learning 10 trees in this iteration for father

% Learn model for: father
% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:2 milliseconds
No hidden examples for : father
Time to build dataset: 5 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 2 4 5 6 8 9 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    father(+name, +name)
%  Modes (39):
%    male(+name),
%    childof(+name, +name),
%    siblingof(+name, -name),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
% [ LazyGroundClauseIndex ]  Building full index for male/1 with 13 assertions.
% [ LazyGroundClauseIndex ]  Building full index for childof/2 with 16 assertions.
% [ LazyGroundClauseIndex ]  Building full index for siblingof/2 with 12 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for siblingof/2.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -3,150001 (regressionFit = 3,150000, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -3,150001): father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -2,500001 (regressionFit = 2,500000, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,500001): father(_, A) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,833334 (regressionFit = 0,833333, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,833334): father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -3,142858 (regressionFit = 3,142857, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
Setting 0.6914822684328455 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,83 and has recall=0,43, precision=0,98, and F1=0,59 (using m-estimates).
 // It covers 42,9% of the positive examples, 6 of 14,
(father(D, E) :- childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 42,9% of the positive examples and NaN% of the negatives.}

% Have these 8 positive seeds: 5 6 7 8 9 10 11 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,765106 (regressionFit = 0,765105, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,765106): father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,596570 (regressionFit = 0,596569, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,596570): father(_, A) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,891847 (regressionFit = 0,891846, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
Setting 0.012407800883089432 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,60 and has recall=0,71, precision=0,99, and F1=0,83 (using m-estimates).
 // It covers 71,4% of the positive examples, 10 of 14 (of which 5 are newly covered),
 // So far 11 (78,6%) of the positive examples have been covered.
(father(D, E) :- male(E))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 78,6% of the positive examples and NaN% of the negatives.}

% Have these 3 positive seeds: 7 9 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0,746974 (regressionFit = 0,746973, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,746974): father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,869093 (regressionFit = 0,869092, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
Setting -0.028370212980097547 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,75 and has recall=0,71, precision=0,99, and F1=0,83 (using m-estimates).
 // It covers 71,4% of the positive examples, 10 of 14 (of which 2 are newly covered),
 // So far 13 (92,9%) of the positive examples have been covered.
(father(D, E) :- male(D))

% On cycle #3, the best clause found is:
%      father(A, _) :- male(A).  [covers 10,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 92,9% of the positive examples and NaN% of the negatives.}

% ******************************************


% ******************************************
adding regression values
Added 0.6914822684328455 to wgt = 0,6915 (father(A, B) :- childof(B, A))
Added 0.012407800883089432 to wgt = 0,0124 (father(_, A) :- male(A))
Added -0.028370212980097547 to wgt = -0,0284 (father(A, _) :- male(A))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 1 trees is 471 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 12 of the 21 negative examples.
% Dataset size: 17
Computing probabilities
prob time:30 milliseconds
No hidden examples for : father
Time to build dataset: 40 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 2 3 5 7 9 10 11 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -2,929662 (regressionFit = 2,929661, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,929662): father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]
%     Score = -2,198155 (regressionFit = 2,198154, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -2,198155): father(_, A) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,875649 (regressionFit = 1,875648, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,875649): father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -2,983047 (regressionFit = 2,983046, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 9,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
Setting 0.37870235223516735 for 
 // Learned this clause on outer loop cycle #1.  It scores=-1,88 and has recall=0,47, precision=0,99, and F1=0,63 (using m-estimates).
 // It covers 47,1% of the positive examples, 8 of 17,
(father(D, E) :- childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
% This clause covers 8 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 47,1% of the positive examples and NaN% of the negatives.}

% Have these 9 positive seeds: 5 6 7 8 9 10 11 12 13
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -1,778903 (regressionFit = 1,778902, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,778903): father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,078557 (regressionFit = 1,078556, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,078557): father(_, A) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,908355 (regressionFit = 1,908353, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 9,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
Setting 0.09384822285356469 for 
 // Learned this clause on outer loop cycle #2.  It scores=-1,08 and has recall=0,64, precision=0,99, and F1=0,78 (using m-estimates).
 // It covers 64,7% of the positive examples, 11 of 17 (of which 6 are newly covered),
 // So far 14 (82,4%) of the positive examples have been covered.
(father(D, E) :- male(E))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
% This clause covers 11 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 82,4% of the positive examples and NaN% of the negatives.}

% Have these 3 positive seeds: 9 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -1,514651 (regressionFit = 1,514649, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,514651): father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,616793 (regressionFit = 1,616792, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 9,0/17,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]
Setting -0.0781852639676875 for 
 // Learned this clause on outer loop cycle #3.  It scores=-1,51 and has recall=0,70, precision=0,99, and F1=0,82 (using m-estimates).
 // It covers 70,6% of the positive examples, 12 of 17 (of which 2 are newly covered),
 // So far 16 (94,1%) of the positive examples have been covered.
(father(D, E) :- male(D))

% On cycle #3, the best clause found is:
%      father(A, _) :- male(A).  [covers 12,0/17,0 pos, 0,0/0,0 neg]
% This clause covers 12 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 94,1% of the positive examples and NaN% of the negatives.}

% ******************************************


% ******************************************
adding regression values
Added 0.37870235223516735 to wgt = 0,3787 (father(A, B) :- childof(B, A))
Added 0.09384822285356469 to wgt = 0,0938 (father(_, A) :- male(A))
Added -0.0781852639676875 to wgt = -0,0782 (father(A, _) :- male(A))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 2 trees is 708 milliseconds.

% Kept 5 of the 5 positive examples.
% Kept 9 of the 21 negative examples.
% Dataset size: 14
Computing probabilities
prob time:8 milliseconds
No hidden examples for : father
Time to build dataset: 8 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 3 5 7 8 9 10 11 12 13
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/14,0 pos, 0,0/0,0 neg]
%     Score = -1,488432 (regressionFit = 1,488431, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,488432): father(_, A) :- male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,788664 (regressionFit = 0,788663, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,788664): father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -2,149116 (regressionFit = 2,149115, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
Setting 0.5080083077395625 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,79 and has recall=0,43, precision=0,98, and F1=0,59 (using m-estimates).
 // It covers 42,9% of the positive examples, 6 of 14,
(father(D, E) :- childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 42,9% of the positive examples and NaN% of the negatives.}

% Have these 8 positive seeds: 5 6 7 8 9 10 11 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,573324 (regressionFit = 0,573323, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,573324): father(_, A) :- male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,786530 (regressionFit = 0,786529, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/14,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
Setting 0.02700550168416017 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,57 and has recall=0,64, precision=0,99, and F1=0,78 (using m-estimates).
 // It covers 64,3% of the positive examples, 9 of 14 (of which 4 are newly covered),
 // So far 10 (71,4%) of the positive examples have been covered.
(father(D, E) :- male(E))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 9,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 9 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 71,4% of the positive examples and NaN% of the negatives.}

% Have these 4 positive seeds: 6 8 9 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/14,0 pos, 0,0/0,0 neg]
%     Score = -0,741324 (regressionFit = 0,741323, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,741324): father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
Setting -0.009558558550448296 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,74 and has recall=0,50, precision=0,99, and F1=0,66 (using m-estimates).
 // It covers 50,0% of the positive examples, 7 of 14 (of which 2 are newly covered),
 // So far 12 (85,7%) of the positive examples have been covered.
(father(D, E) :- siblingof(D, Anon1893))

% On cycle #3, the best clause found is:
%      father(A, _) :- siblingof(A, _).  [covers 7,0/14,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 85,7% of the positive examples and NaN% of the negatives.}

% Have these 2 positive seeds: 6 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #4, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/14,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% Have these 2 positive seeds: 6 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/14,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% Have these 2 positive seeds: 6 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'father(_, _).  [covers 14,0/14,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/14,0 pos, 0,0/0,0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (6).

% ******************************************
adding regression values
Added 0.5080083077395625 to wgt = 0,5080 (father(A, B) :- childof(B, A))
Added 0.02700550168416017 to wgt = 0,0270 (father(_, A) :- male(A))
Added -0.009558558550448296 to wgt = -0,0096 (father(A, _) :- siblingof(A, _))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 3 trees is 1,186 seconds.

% Kept 5 of the 5 positive examples.
% Kept 6 of the 21 negative examples.
% Dataset size: 11
Computing probabilities
prob time:41 milliseconds
No hidden examples for : father
Time to build dataset: 44 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 9,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,961131 (regressionFit = 0,961130, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,961131): father(_, A) :- male(A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,821407 (regressionFit = 0,821406, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,821407): father(A, B) :- childof(B, A).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -1,510128 (regressionFit = 1,510127, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/11,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/11,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
Setting 0.3821938913149756 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,82 and has recall=0,54, precision=0,98, and F1=0,70 (using m-estimates).
 // It covers 54,5% of the positive examples, 6 of 11,
(father(D, E) :- childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 54,5% of the positive examples and NaN% of the negatives.}

% Have these 5 positive seeds: 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 9,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,504479 (regressionFit = 0,504478, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,504479): father(_, A) :- male(A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,795600 (regressionFit = 0,795598, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/11,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/11,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]
Setting 0.04982652975666821 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,50 and has recall=0,72, precision=0,99, and F1=0,83 (using m-estimates).
 // It covers 72,7% of the positive examples, 8 of 11 (of which 3 are newly covered),
 // So far 9 (81,8%) of the positive examples have been covered.
(father(D, E) :- male(E))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 8,0/11,0 pos, 0,0/0,0 neg]
% This clause covers 8 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 81,8% of the positive examples and NaN% of the negatives.}

% Have these 2 positive seeds: 5 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'father(_, _).  [covers 11,0/11,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 9,0/11,0 pos, 0,0/0,0 neg]
%     Score = -0,722003 (regressionFit = 0,722002, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,722003): father(A, _) :- siblingof(A, _).  [covers 6,0/11,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 6,0/11,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, _).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
Setting -0.009134133763471093 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,72 and has recall=0,54, precision=0,98, and F1=0,70 (using m-estimates).
 // It covers 54,5% of the positive examples, 6 of 11 (of which 1 are newly covered),
 // So far 10 (90,9%) of the positive examples have been covered.
(father(D, E) :- siblingof(D, Anon2267))

% On cycle #3, the best clause found is:
%      father(A, _) :- siblingof(A, _).  [covers 6,0/11,0 pos, 0,0/0,0 neg]
% This clause covers 6 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 90,9% of the positive examples and NaN% of the negatives.}

% ******************************************


% ******************************************
adding regression values
Added 0.3821938913149756 to wgt = 0,3822 (father(A, B) :- childof(B, A))
Added 0.04982652975666821 to wgt = 0,0498 (father(_, A) :- male(A))
Added -0.009134133763471093 to wgt = -0,0091 (father(A, _) :- siblingof(A, _))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 4 trees is 1,528 seconds.

% Kept 5 of the 5 positive examples.
% Kept 10 of the 21 negative examples.
% Dataset size: 15
Computing probabilities
prob time:7 milliseconds
No hidden examples for : father
Time to build dataset: 8 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,757942 (regressionFit = 1,757941, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,757942): father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,067126 (regressionFit = 1,067125, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,067126): father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,767998 (regressionFit = 1,767997, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,875698 (regressionFit = 1,875696, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]' score=-1.0671263548415735
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,426031 (regressionFit = 1,426030, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,305759 (regressionFit = 0,305757, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,305759): father(A, B) :- male(B), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,648097 (regressionFit = 1,648095, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]' score=-1.7579419663099192
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,426031 (regressionFit = 1,426030, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,366342 (regressionFit = 1,366340, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,849475 (regressionFit = 1,849473, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]' score=-1.7679978385764112
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,366342 (regressionFit = 1,366340, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,305759 (regressionFit = 0,305757, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,305759): father(A, B) :- childof(B, A), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,674058 (regressionFit = 1,674056, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]' score=-1.8756976809422157
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -1,880375 (regressionFit = 1,880372, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,510275 (regressionFit = 1,510273, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,884748 (regressionFit = 1,884746, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,682271 (regressionFit = 1,682268, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for childof/2.
%     Score = -1,682271 (regressionFit = 1,682268, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,875699 (regressionFit = 1,875696, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for siblingof/2.
%     Score = -1,875698 (regressionFit = 1,875696, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -1,875699 (regressionFit = 1,875696, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
Setting 0.4441115128423757 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,31 and has recall=0,33, precision=0,98, and F1=0,50 (using m-estimates).
 // It covers 33,3% of the positive examples, 5 of 15,
(father(D, E) :- childof(E, D), male(E))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A), male(B).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 33,3% of the positive examples and NaN% of the negatives.}

% Have these 10 positive seeds: 5 6 7 8 9 10 11 12 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,449479 (regressionFit = 0,449478, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,449479): father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,240896 (regressionFit = 0,240894, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,240896): father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,521329 (regressionFit = 0,521328, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,513033 (regressionFit = 0,513031, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]' score=-0.240895591904704
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,351971 (regressionFit = 0,351969, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,426727 (regressionFit = 0,426724, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=1] 'father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]' score=-0.4494792677522936
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,351971 (regressionFit = 0,351969, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,490402 (regressionFit = 0,490400, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,469005 (regressionFit = 0,469003, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 2,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]' score=-0.5130327262456742
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 0 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,536470 (regressionFit = 0,536468, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,339639 (regressionFit = 0,339637, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,485136 (regressionFit = 0,485134, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,666478 (regressionFit = 0,666476, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,666478 (regressionFit = 0,666476, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,513034 (regressionFit = 0,513031, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,513034 (regressionFit = 0,513031, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,513034 (regressionFit = 0,513031, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]' score=-0.5213288606730444
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,490402 (regressionFit = 0,490400, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,520965 (regressionFit = 0,520963, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'father(A, B) :- siblingof(A, B).  [covers 2,0/15,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'father(A, B) :- siblingof(B, A).  [covers 2,0/15,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #2, bodyLen=1] 'father(_, A) :- siblingof(A, _).  [covers 2,0/15,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
Setting -0.07501340625169735 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,24 and has recall=0,66, precision=0,99, and F1=0,79 (using m-estimates).
 // It covers 66,7% of the positive examples, 10 of 15 (of which 5 are newly covered),
 // So far 10 (66,7%) of the positive examples have been covered.
(father(D, E) :- male(E))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 66,7% of the positive examples and NaN% of the negatives.}

% Have these 5 positive seeds: 5 9 12 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,581499 (regressionFit = 0,581498, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,581499): father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,684935 (regressionFit = 0,684934, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,662733 (regressionFit = 0,662731, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=1] 'father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]' score=-0.5814992560905391
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,644930 (regressionFit = 0,644928, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]' score=-0.6627326679410973
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -0,641818 (regressionFit = 0,641816, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,793104 (regressionFit = 0,793102, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,793104 (regressionFit = 0,793102, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,662734 (regressionFit = 0,662731, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,662733 (regressionFit = 0,662731, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,662734 (regressionFit = 0,662731, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]' score=-0.6849345461995882
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,644930 (regressionFit = 0,644928, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,684142 (regressionFit = 0,684140, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
Setting -0.06117483095830437 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,58 and has recall=0,66, precision=0,99, and F1=0,79 (using m-estimates).
 // It covers 66,7% of the positive examples, 10 of 15 (of which 2 are newly covered),
 // So far 12 (80,0%) of the positive examples have been covered.
(father(D, E) :- male(D))

% On cycle #3, the best clause found is:
%      father(A, _) :- male(A).  [covers 10,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 80,0% of the positive examples and NaN% of the negatives.}

% Have these 3 positive seeds: 9 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #4, bodyLen=0] 'father(_, _).  [covers 15,0/15,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0,771034 (regressionFit = 0,771033, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,771034): father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,747266 (regressionFit = 0,747265, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,747266): father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]' score=-0.7472658201460407
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -0,733323 (regressionFit = 0,733321, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,733323): father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,845526 (regressionFit = 0,845524, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,845526 (regressionFit = 0,845524, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,747267 (regressionFit = 0,747265, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,747267 (regressionFit = 0,747265, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
%     Score = -0,747267 (regressionFit = 0,747265, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 8,0/15,0 pos, 0,0/0,0 neg]' score=-0.7710338528070831
%  At # nodes expanded = 3, |OPEN| = 0.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 9 bad extensions.
%     Score = -0,777684 (regressionFit = 0,777682, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
Setting -0.022647381365394945 for 
 // Learned this clause on outer loop cycle #4.  It scores=-0,73 and has recall=0,46, precision=0,99, and F1=0,63 (using m-estimates).
 // It covers 46,7% of the positive examples, 7 of 15 (of which 1 are newly covered),
 // So far 13 (86,7%) of the positive examples have been covered.
(father(D, E) :- siblingof(D, Anon3303), male(Anon3303))

% On cycle #4, the best clause found is:
%      father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/15,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 4 best clauses covers 86,7% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (4).

% ******************************************
adding regression values
Added 0.4441115128423757 to wgt = 0,4441 (father(A, B) :- childof(B, A), male(B))
Added -0.07501340625169735 to wgt = -0,0750 (father(_, A) :- male(A))
Added -0.06117483095830437 to wgt = -0,0612 (father(A, _) :- male(A))
Added -0.022647381365394945 to wgt = -0,0226 (father(A, _) :- siblingof(A, B), male(B))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 5 trees is 2,029 seconds.

% Kept 5 of the 5 positive examples.
% Kept 8 of the 21 negative examples.
% Dataset size: 13
Computing probabilities
prob time:22 milliseconds
No hidden examples for : father
Time to build dataset: 37 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 2 3 4 5 6 7 9 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,001600 (regressionFit = 0,001599, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,001600): father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642137 (regressionFit = 0,642136, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,767856 (regressionFit = 0,767855, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642137 (regressionFit = 0,642136, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642137 (regressionFit = 0,642136, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]' score=-0.0016002494070000246
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,210736 (regressionFit = 0,210734, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 4,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,001601 (regressionFit = 0,001599, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,394399 (regressionFit = 0,394397, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'father(A, B) :- siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]' score=-0.6421366413995253
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(A, B), male(A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(A, B), male(B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'father(A, B) :- siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]' score=-0.6421366413995253
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(B, A), male(A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(B, A), male(B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- siblingof(B, A), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, A), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, A), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'father(_, A) :- siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]' score=-0.6421368513995253
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(B, _), male(A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- siblingof(A, _), male(A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.1300000000000004E-6) for clause:  father(_, A) :- siblingof(A, B), male(B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, _), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(B, _), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, _), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.24E-6) for clause:  father(_, A) :- siblingof(A, _), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0300000000000005E-6) for clause:  father(_, A) :- siblingof(A, B), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.1400000000000003E-6) for clause:  father(_, A) :- siblingof(A, B), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]' score=-0.7678560387315297
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 0 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,714713 (regressionFit = 0,714711, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,735380 (regressionFit = 0,735378, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,744917 (regressionFit = 0,744915, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,365338 (regressionFit = 0,365336, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,365338 (regressionFit = 0,365336, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,535403 (regressionFit = 0,535401, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,767857 (regressionFit = 0,767855, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,535403 (regressionFit = 0,535401, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,535403 (regressionFit = 0,535401, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,535403 (regressionFit = 0,535401, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,767857 (regressionFit = 0,767855, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,535403 (regressionFit = 0,535401, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,767857 (regressionFit = 0,767855, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'father(A, _) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,776797 (regressionFit = 0,776796, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 10,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,210736 (regressionFit = 0,210734, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 4,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,777942 (regressionFit = 0,777940, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 8, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,776797 (regressionFit = 0,776796, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 10,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,001601 (regressionFit = 0,001599, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,736024 (regressionFit = 0,736022, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,642138 (regressionFit = 0,642136, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
Setting 0.3745839023733179 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,0016 and has recall=0,38, precision=0,98, and F1=0,55 (using m-estimates).
 // It covers 38,5% of the positive examples, 5 of 13,
(father(D, E) :- childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 38,5% of the positive examples and NaN% of the negatives.}

% Have these 8 positive seeds: 5 6 7 8 9 10 11 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044796 (regressionFit = 0,044795, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,044796): father(A, B) :- siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,050118 (regressionFit = 0,050117, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044796 (regressionFit = 0,044795, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'father(A, B) :- siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]' score=-0.04479642054679194
%  At # nodes expanded = 2, |OPEN| = 5.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(A, B), male(A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(A, B), male(B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=1] 'father(A, B) :- siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]' score=-0.04479642054679194
%  At # nodes expanded = 3, |OPEN| = 4.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(B, A), male(A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(B, A), male(B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- siblingof(B, A), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, A), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, A), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'father(_, A) :- siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]' score=-0.04479663054679194
%  At # nodes expanded = 4, |OPEN| = 3.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,044798 (regressionFit = 0,044795, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(B, _), male(A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044798 (regressionFit = 0,044795, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- siblingof(A, _), male(A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044798 (regressionFit = 0,044795, penalties=2.1300000000000004E-6) for clause:  father(_, A) :- siblingof(A, B), male(B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, _), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044798 (regressionFit = 0,044795, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(B, _), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, _), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044798 (regressionFit = 0,044795, penalties=2.24E-6) for clause:  father(_, A) :- siblingof(A, _), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0300000000000005E-6) for clause:  father(_, A) :- siblingof(A, B), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044798 (regressionFit = 0,044795, penalties=2.1400000000000003E-6) for clause:  father(_, A) :- siblingof(A, B), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]' score=-0.050117831306513115
%  At # nodes expanded = 5, |OPEN| = 2.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,074960 (regressionFit = 0,074958, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,059061 (regressionFit = 0,059059, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,053836 (regressionFit = 0,053833, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,070823 (regressionFit = 0,070821, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,050119 (regressionFit = 0,050117, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,070823 (regressionFit = 0,070821, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,070823 (regressionFit = 0,070821, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,070823 (regressionFit = 0,070821, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,050119 (regressionFit = 0,050117, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,070823 (regressionFit = 0,070821, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,050119 (regressionFit = 0,050117, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'father(A, _) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,051926 (regressionFit = 0,051924, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 10,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,052242 (regressionFit = 0,052240, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044798 (regressionFit = 0,044795, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 7, |OPEN| = 0.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,051926 (regressionFit = 0,051924, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 10,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,048011 (regressionFit = 0,048009, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044797 (regressionFit = 0,044795, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044798 (regressionFit = 0,044795, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
Setting -0.12335578351994375 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,04 and has recall=0,23, precision=0,97, and F1=0,37 (using m-estimates).
 // It covers 23,1% of the positive examples, 3 of 13,
 // So far 8 (61,5%) of the positive examples have been covered.
(father(D, E) :- siblingof(D, E))

% On cycle #2, the best clause found is:
%      father(A, B) :- siblingof(A, B).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 61,5% of the positive examples and NaN% of the negatives.}

% Have these 5 positive seeds: 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,034298 (regressionFit = 0,034297, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,034298): father(A, _) :- siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]' score=-0.034298031014429006
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 17 bad extensions.
%     Score = -0,061939 (regressionFit = 0,061937, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,034286 (regressionFit = 0,034284, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,034286): father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,034299 (regressionFit = 0,034297, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,034299 (regressionFit = 0,034297, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,034299 (regressionFit = 0,034297, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=1] 'father(A, _) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,048586 (regressionFit = 0,048584, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 10,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,039221 (regressionFit = 0,039219, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=1] 'father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,048586 (regressionFit = 0,048584, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 10,0/13,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/13,0 pos, 0,0/0,0 neg]

% The best node found: father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
Setting -0.006418212131709423 for 
 // Learned this clause on outer loop cycle #3.  It scores=-0,03 and has recall=0,53, precision=0,99, and F1=0,69 (using m-estimates).
 // It covers 53,8% of the positive examples, 7 of 13 (of which 1 are newly covered),
 // So far 9 (69,2%) of the positive examples have been covered.
(father(D, E) :- siblingof(D, Anon4825), male(Anon4825))

% On cycle #3, the best clause found is:
%      father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/13,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 1 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 69,2% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (3).

% ******************************************
adding regression values
Added 0.3745839023733179 to wgt = 0,3746 (father(A, B) :- childof(B, A))
Added -0.12335578351994375 to wgt = -0,1234 (father(A, B) :- siblingof(A, B))
Added -0.006418212131709423 to wgt = -0,0064 (father(A, _) :- siblingof(A, B), male(B))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 6 trees is 2,579 seconds.

% Kept 5 of the 5 positive examples.
% Kept 12 of the 21 negative examples.
% Dataset size: 17
Computing probabilities
prob time:6 milliseconds
No hidden examples for : father
Time to build dataset: 8 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 1 3 4 5 6 8 11 12 15
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -1,370751 (regressionFit = 1,370750, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,370751): father(A, _) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,716553 (regressionFit = 0,716552, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,716553): father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,521144 (regressionFit = 1,521143, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,483866 (regressionFit = 1,483865, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]' score=-0.7165534607305957
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -1,115421 (regressionFit = 1,115419, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 10,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,511069 (regressionFit = 0,511067, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,511069): father(A, B) :- male(B), childof(B, A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,285915 (regressionFit = 1,285913, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 7,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'father(A, _) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]' score=-1.3707510756523227
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -1,115421 (regressionFit = 1,115419, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 10,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,242766 (regressionFit = 1,242764, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,403667 (regressionFit = 1,403665, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 8,0/17,0 pos, 0,0/0,0 neg]' score=-1.4838662392911295
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 0 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -1,470969 (regressionFit = 1,470967, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,117212 (regressionFit = 1,117210, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 7,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,473884 (regressionFit = 1,473882, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,495750 (regressionFit = 1,495748, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,495750 (regressionFit = 1,495748, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,483867 (regressionFit = 1,483865, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,483867 (regressionFit = 1,483865, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,483867 (regressionFit = 1,483865, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 8,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]' score=-1.5211439035170784
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,242766 (regressionFit = 1,242764, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,511069 (regressionFit = 0,511067, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -1,410516 (regressionFit = 1,410514, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 4,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'father(A, B) :- siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'father(A, B) :- siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'father(_, A) :- siblingof(A, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
Setting 0.2936175079990261 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,51 and has recall=0,29, precision=0,98, and F1=0,45 (using m-estimates).
 // It covers 29,4% of the positive examples, 5 of 17,
(father(D, E) :- male(E), childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 29,4% of the positive examples and NaN% of the negatives.}

% Have these 10 positive seeds: 5 6 7 8 9 10 11 12 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 17,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,633095 (regressionFit = 0,633094, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,633095): father(A, _) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,216827 (regressionFit = 0,216826, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,216827): father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,692206 (regressionFit = 0,692205, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,701963 (regressionFit = 0,701962, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]' score=-0.21682748019119805
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,472660 (regressionFit = 0,472658, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 10,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,586163 (regressionFit = 0,586161, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 7,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=1] 'father(A, _) :- male(A).  [covers 11,0/17,0 pos, 0,0/0,0 neg]' score=-0.6330952368250918
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,472660 (regressionFit = 0,472658, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 10,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,705103 (regressionFit = 0,705101, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,638780 (regressionFit = 0,638778, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]' score=-0.6922063158885605
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,705103 (regressionFit = 0,705101, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 8,0/17,0 pos, 0,0/0,0 neg]' score=-0.7019632455410637
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,754692 (regressionFit = 0,754690, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 5,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,456686 (regressionFit = 0,456684, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 7,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,667385 (regressionFit = 0,667383, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,701964 (regressionFit = 0,701962, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,701964 (regressionFit = 0,701962, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 8,0/17,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]
%     Score = -0,701964 (regressionFit = 0,701962, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 8,0/17,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'father(A, B) :- siblingof(A, B).  [covers 2,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'father(A, B) :- siblingof(B, A).  [covers 2,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #2, bodyLen=1] 'father(_, A) :- siblingof(A, _).  [covers 2,0/17,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]
Setting -0.07985239885836445 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,22 and has recall=0,76, precision=0,99, and F1=0,86 (using m-estimates).
 // It covers 76,5% of the positive examples, 13 of 17 (of which 8 are newly covered),
 // So far 13 (76,5%) of the positive examples have been covered.
(father(D, E) :- male(E))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 13,0/17,0 pos, 0,0/0,0 neg]
% This clause covers 13 positive examples, of which 8 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 76,5% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.2936175079990261 to wgt = 0,2936 (father(A, B) :- male(B), childof(B, A))
Added -0.07985239885836445 to wgt = -0,0799 (father(_, A) :- male(A))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 7 trees is 3,042 seconds.

% Kept 5 of the 5 positive examples.
% Kept 8 of the 21 negative examples.
% Dataset size: 13
Computing probabilities
prob time:92 milliseconds
No hidden examples for : father
Time to build dataset: 93 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 2 4 5 6 7 8 9 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,411483 (regressionFit = 0,411482, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 9,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,411483): father(A, _) :- male(A).  [covers 9,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,003041 (regressionFit = 0,003040, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,003041): father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,403463 (regressionFit = 0,403462, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]' score=-0.0030414593988962553
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,120563 (regressionFit = 0,120561, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 4,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,003042 (regressionFit = 0,003040, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,219962 (regressionFit = 0,219960, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 3,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]' score=-0.40346322706441157
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 0 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,417243 (regressionFit = 0,417240, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,361943 (regressionFit = 0,361941, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,392436 (regressionFit = 0,392434, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,207857 (regressionFit = 0,207855, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,207857 (regressionFit = 0,207855, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 3,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,403464 (regressionFit = 0,403462, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,403464 (regressionFit = 0,403462, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,403464 (regressionFit = 0,403462, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'father(A, _) :- male(A).  [covers 9,0/13,0 pos, 0,0/0,0 neg]' score=-0.4114831009943259
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,385431 (regressionFit = 0,385429, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 8,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,120563 (regressionFit = 0,120561, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 4,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,433953 (regressionFit = 0,433951, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,385431 (regressionFit = 0,385429, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,003042 (regressionFit = 0,003040, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,367628 (regressionFit = 0,367625, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'father(A, B) :- siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'father(A, B) :- siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'father(_, A) :- siblingof(A, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
Setting 0.2513383062417555 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,0030 and has recall=0,38, precision=0,98, and F1=0,55 (using m-estimates).
 // It covers 38,5% of the positive examples, 5 of 13,
(father(D, E) :- childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- childof(B, A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 38,5% of the positive examples and NaN% of the negatives.}

% Have these 8 positive seeds: 5 6 7 8 9 10 11 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 13,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,044136 (regressionFit = 0,044135, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 9,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,044136): father(A, _) :- male(A).  [covers 9,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,042862 (regressionFit = 0,042860, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,042862): father(A, _) :- siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]' score=-0.042861687803963835
%  At # nodes expanded = 2, |OPEN| = 5.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,077332 (regressionFit = 0,077330, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,054002 (regressionFit = 0,054000, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,044921 (regressionFit = 0,044919, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,042863 (regressionFit = 0,042860, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,042862 (regressionFit = 0,042860, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,042863 (regressionFit = 0,042860, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=1] 'father(A, _) :- male(A).  [covers 9,0/13,0 pos, 0,0/0,0 neg]' score=-0.04413621402009011
%  At # nodes expanded = 3, |OPEN| = 4.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,041398 (regressionFit = 0,041396, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(A), male(B).  [covers 8,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,041398): father(A, B) :- male(A), male(B).  [covers 8,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,047893 (regressionFit = 0,047891, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(A), siblingof(B, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 11,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 3.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,041398 (regressionFit = 0,041396, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -0,038497 (regressionFit = 0,038495, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,038497): father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'father(A, B) :- siblingof(A, B).  [covers 2,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'father(A, B) :- siblingof(B, A).  [covers 2,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'father(_, A) :- siblingof(A, _).  [covers 2,0/13,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/13,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
Setting -0.012541675920894052 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,04 and has recall=0,38, precision=0,98, and F1=0,55 (using m-estimates).
 // It covers 38,5% of the positive examples, 5 of 13 (of which 2 are newly covered),
 // So far 7 (53,8%) of the positive examples have been covered.
(father(D, E) :- male(E), siblingof(D, Anon6655))

% On cycle #2, the best clause found is:
%      father(A, B) :- male(B), siblingof(A, _).  [covers 5,0/13,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 53,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.2513383062417555 to wgt = 0,2513 (father(A, B) :- childof(B, A))
Added -0.012541675920894052 to wgt = -0,0125 (father(A, B) :- male(B), siblingof(A, _))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 8 trees is 3,431 seconds.

% Kept 5 of the 5 positive examples.
% Kept 13 of the 21 negative examples.
% Dataset size: 18
Computing probabilities
prob time:22 milliseconds
No hidden examples for : father
Time to build dataset: 28 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 1 2 3 5 7 9 10 11 12 13
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,265693 (regressionFit = 1,265692, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -1,265693): father(A, _) :- male(A).  [covers 12,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,826416 (regressionFit = 0,826415, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,826416): father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,438462 (regressionFit = 1,438461, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,372777 (regressionFit = 1,372775, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]' score=-0.8264163269321766
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,030515 (regressionFit = 1,030513, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,668141 (regressionFit = 0,668139, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,668141): father(A, B) :- male(B), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,094561 (regressionFit = 1,094559, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'father(A, B) :- male(B), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]' score=-0.6681414321910305
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,859042 (regressionFit = 0,859040, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), childof(B, A), male(A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,020961 (regressionFit = 1,020958, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(B), childof(B, A), siblingof(A, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=2] 'father(A, B) :- male(B), male(A).  [covers 8,0/18,0 pos, 0,0/0,0 neg]' score=-1.0305148543489595
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,859042 (regressionFit = 0,859040, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), childof(B, A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,237355 (regressionFit = 1,237352, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'father(A, B) :- male(B), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]' score=-1.0945613899296682
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -1,471029 (regressionFit = 1,471026, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,089251 (regressionFit = 1,089248, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,154303 (regressionFit = 1,154300, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), childof(B, A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,154303 (regressionFit = 1,154300, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), childof(B, C).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,094562 (regressionFit = 1,094559, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,094562 (regressionFit = 1,094559, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,094562 (regressionFit = 1,094559, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'father(A, _) :- male(A).  [covers 12,0/18,0 pos, 0,0/0,0 neg]' score=-1.2656934583949275
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -1,254500 (regressionFit = 1,254498, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,271458 (regressionFit = 1,271455, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'father(A, B) :- male(A), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]' score=-1.2545000021729698
%  At # nodes expanded = 7, |OPEN| = 3.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,859042 (regressionFit = 0,859040, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(A), childof(B, A), male(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(A), childof(B, A), siblingof(A, _).  [covers 2,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]' score=-1.2714575296294741
%  At # nodes expanded = 8, |OPEN| = 2.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -1,336999 (regressionFit = 1,336996, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), male(B).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,271458 (regressionFit = 1,271455, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), male(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), childof(B, A).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- male(A), siblingof(A, C), childof(B, C).  [covers 2,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,271459 (regressionFit = 1,271455, penalties=3.240000000000001E-6) for clause:  father(A, _) :- male(A), siblingof(A, _), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,271458 (regressionFit = 1,271455, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,271458 (regressionFit = 1,271455, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 6,0/18,0 pos, 0,0/0,0 neg]' score=-1.3727766889399624
%  At # nodes expanded = 9, |OPEN| = 1.  Pruned 0 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -1,323608 (regressionFit = 1,323605, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,023820 (regressionFit = 1,023818, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,357311 (regressionFit = 1,357309, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,476174 (regressionFit = 1,476172, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,476174 (regressionFit = 1,476172, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,372778 (regressionFit = 1,372775, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,372777 (regressionFit = 1,372775, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -1,372778 (regressionFit = 1,372775, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/18,0 pos, 0,0/0,0 neg]

***** Warning: #1 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
Setting 0.2108769928493947 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,67 and has recall=0,28, precision=0,98, and F1=0,43 (using m-estimates).
 // It covers 27,8% of the positive examples, 5 of 18,
(father(D, E) :- male(E), childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 27,8% of the positive examples and NaN% of the negatives.}

% Have these 10 positive seeds: 5 6 7 8 10 11 12 13 14 15
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 18,0/18,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,776221 (regressionFit = 0,776220, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 12,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,776221): father(A, _) :- male(A).  [covers 12,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,581892 (regressionFit = 0,581891, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,581892): father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,829900 (regressionFit = 0,829899, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,882276 (regressionFit = 0,882274, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 6,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]' score=-0.5818916418154022
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,683134 (regressionFit = 0,683132, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 8,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,765558 (regressionFit = 0,765556, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'father(A, B) :- male(B), male(A).  [covers 8,0/18,0 pos, 0,0/0,0 neg]' score=-0.6831342387092534
%  At # nodes expanded = 3, |OPEN| = 4.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 8 bad extensions.
%     Score = -0,809814 (regressionFit = 0,809811, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, _).  [covers 3,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'father(A, B) :- male(B), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]' score=-0.7655581165958251
%  At # nodes expanded = 4, |OPEN| = 3.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -1,040232 (regressionFit = 1,040229, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,765881 (regressionFit = 0,765878, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,765559 (regressionFit = 0,765556, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,765559 (regressionFit = 0,765556, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,765559 (regressionFit = 0,765556, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'father(A, _) :- male(A).  [covers 12,0/18,0 pos, 0,0/0,0 neg]' score=-0.7762214300106729
%  At # nodes expanded = 5, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,876358 (regressionFit = 0,876356, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(A), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,804097 (regressionFit = 0,804095, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=2] 'father(A, _) :- male(A), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]' score=-0.8040972182225762
%  At # nodes expanded = 6, |OPEN| = 3.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -0,981405 (regressionFit = 0,981402, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(A), siblingof(A, _), male(B).  [covers 3,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,804098 (regressionFit = 0,804095, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), male(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,804098 (regressionFit = 0,804095, penalties=3.240000000000001E-6) for clause:  father(A, _) :- male(A), siblingof(A, _), siblingof(A, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,804098 (regressionFit = 0,804095, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,804098 (regressionFit = 0,804095, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- male(A), siblingof(A, B), siblingof(B, _).  [covers 4,0/18,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 8,0/18,0 pos, 0,0/0,0 neg]' score=-0.8299004095594903
%  At # nodes expanded = 7, |OPEN| = 2.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 8 bad extensions.

% Consider expanding [#8 of outerLoop #2, bodyLen=2] 'father(A, B) :- male(A), childof(B, A).  [covers 5,0/18,0 pos, 0,0/0,0 neg]' score=-0.8763577018325447
%  At # nodes expanded = 8, |OPEN| = 1.  Pruned 0 variant children.  Sending 0 items to OPEN for evaluation and possible insertion.
% Have created 0 valid-on-seeds descendants and have picked up 8 bad extensions.

% Consider expanding [#9 of outerLoop #2, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 6,0/18,0 pos, 0,0/0,0 neg]' score=-0.8822756675194764
%  At # nodes expanded = 9, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 16 bad extensions.
%     Score = -0,833107 (regressionFit = 0,833104, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,746999 (regressionFit = 0,746997, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 4,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,838365 (regressionFit = 0,838363, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,882277 (regressionFit = 0,882274, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,882276 (regressionFit = 0,882274, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 6,0/18,0 pos, 0,0/0,0 neg]
%     Score = -0,882277 (regressionFit = 0,882274, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 6,0/18,0 pos, 0,0/0,0 neg]

***** Warning: #2 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
Setting -0.0632368273237864 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,58 and has recall=0,55, precision=0,99, and F1=0,71 (using m-estimates).
 // It covers 55,6% of the positive examples, 10 of 18 (of which 5 are newly covered),
 // So far 10 (55,6%) of the positive examples have been covered.
(father(D, E) :- male(E))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 10,0/18,0 pos, 0,0/0,0 neg]
% This clause covers 10 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 55,6% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.2108769928493947 to wgt = 0,2109 (father(A, B) :- male(B), childof(B, A))
Added -0.0632368273237864 to wgt = -0,0632 (father(_, A) :- male(A))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Time taken to learn 9 trees is 3,711 seconds.

% Kept 5 of the 5 positive examples.
% Kept 7 of the 21 negative examples.
% Dataset size: 12
Computing probabilities
prob time:15 milliseconds
No hidden examples for : father
Time to build dataset: 15 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 9 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 12,0/12,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 12,0/12,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 12,0/12,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,381563 (regressionFit = 0,381562, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,381563): father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,585676 (regressionFit = 0,585675, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,609629 (regressionFit = 0,609628, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]' score=-0.3815627112198549
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,506946 (regressionFit = 0,506944, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,251974 (regressionFit = 0,251972, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), childof(B, A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,251974): father(A, B) :- male(B), childof(B, A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,588458 (regressionFit = 0,588456, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'father(A, B) :- male(B), childof(B, A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]' score=-0.2519739306822159
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,369207 (regressionFit = 0,369204, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), childof(B, A), male(A).  [covers 4,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,458012 (regressionFit = 0,458009, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(B), childof(B, A), siblingof(A, _).  [covers 3,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=2] 'father(A, B) :- male(B), male(A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]' score=-0.5069460353081853
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -0,369207 (regressionFit = 0,369204, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), childof(B, A).  [covers 4,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,616679 (regressionFit = 0,616676, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, _).  [covers 4,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 6,0/12,0 pos, 0,0/0,0 neg]' score=-0.5856760248385646
%  At # nodes expanded = 5, |OPEN| = 7.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -0,636390 (regressionFit = 0,636388, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,458011 (regressionFit = 0,458009, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _).  [covers 3,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'father(A, B) :- childof(B, A), siblingof(A, _).  [covers 3,0/12,0 pos, 0,0/0,0 neg]' score=-0.4580111578343611
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), male(A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,458012 (regressionFit = 0,458009, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), male(B).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,464692 (regressionFit = 0,464689, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), male(C).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,458012 (regressionFit = 0,458009, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), childof(B, C).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,458012 (regressionFit = 0,458009, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, _), siblingof(A, _).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,458012 (regressionFit = 0,458009, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), siblingof(C, A).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,458012 (regressionFit = 0,458009, penalties=3.04E-6) for clause:  father(A, B) :- childof(B, A), siblingof(A, C), siblingof(C, _).  [covers 3,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/12,0 pos, 0,0/0,0 neg]' score=-0.5884582356514126
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 0 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,650595 (regressionFit = 0,650592, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 4,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,590105 (regressionFit = 0,590102, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,484883 (regressionFit = 0,484880, penalties=3.1300000000000005E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), childof(B, A).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,484883 (regressionFit = 0,484880, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), childof(B, C).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,588459 (regressionFit = 0,588456, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,588459 (regressionFit = 0,588456, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,588459 (regressionFit = 0,588456, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 6,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]' score=-0.609629209158706
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 0 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants and have picked up 10 bad extensions.
%     Score = -0,663569 (regressionFit = 0,663567, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,604316 (regressionFit = 0,604314, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,609487 (regressionFit = 0,609485, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,481179 (regressionFit = 0,481177, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), childof(B, A).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,481179 (regressionFit = 0,481177, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,609630 (regressionFit = 0,609628, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,609630 (regressionFit = 0,609628, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,609630 (regressionFit = 0,609628, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=2] 'father(A, B) :- siblingof(A, C), childof(B, C).  [covers 3,0/12,0 pos, 0,0/0,0 neg]' score=-0.48117885928279397
%  At # nodes expanded = 9, |OPEN| = 9.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 14 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,481180 (regressionFit = 0,481177, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(B).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,487860 (regressionFit = 0,487857, penalties=3.0300000000000006E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), male(C).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,481180 (regressionFit = 0,481177, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), childof(B, A).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,481180 (regressionFit = 0,481177, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(A, _).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,481180 (regressionFit = 0,481177, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(C, A).  [covers 3,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,481180 (regressionFit = 0,481177, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), childof(B, C), siblingof(C, _).  [covers 3,0/12,0 pos, 0,0/0,0 neg]

***** Warning: #3 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- male(B), childof(B, A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
Setting 0.1873743278756333 for 
 // Learned this clause on outer loop cycle #1.  It scores=-0,25 and has recall=0,41, precision=0,98, and F1=0,58 (using m-estimates).
 // It covers 41,7% of the positive examples, 5 of 12,
(father(D, E) :- male(E), childof(E, D))

% On cycle #1, the best clause found is:
%      father(A, B) :- male(B), childof(B, A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 41,7% of the positive examples and NaN% of the negatives.}

% Have these 7 positive seeds: 5 6 7 8 9 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 12,0/12,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 12,0/12,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 12,0/12,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 10,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,215603 (regressionFit = 0,215602, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -0,215603): father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,353462 (regressionFit = 0,353461, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307346 (regressionFit = 0,307345, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]' score=-0.2156032562496338
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -0,279452 (regressionFit = 0,279450, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,308126 (regressionFit = 0,308124, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- male(B), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- male(A), siblingof(A, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'father(A, B) :- male(B), male(A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]' score=-0.279451760580008
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,324800 (regressionFit = 0,324797, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(A, _).  [covers 4,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), male(A), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'father(A, _) :- siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]' score=-0.30734614984260455
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,409025 (regressionFit = 0,409023, penalties=2.2300000000000002E-6) for clause:  father(A, _) :- siblingof(A, _), male(A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,371668 (regressionFit = 0,371666, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(A, _), male(B).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307588 (regressionFit = 0,307586, penalties=2.1300000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307347 (regressionFit = 0,307345, penalties=2.24E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307347 (regressionFit = 0,307345, penalties=2.0300000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307347 (regressionFit = 0,307345, penalties=2.1400000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'father(A, _) :- siblingof(A, B), siblingof(B, A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]' score=-0.3073469498426045
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,409026 (regressionFit = 0,409023, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,371669 (regressionFit = 0,371666, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), male(B).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307589 (regressionFit = 0,307586, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), male(B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, A), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, A), siblingof(B, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=2] 'father(A, _) :- siblingof(A, B), siblingof(B, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]' score=-0.3073470598426045
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 0 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 20 bad extensions.
%     Score = -0,456130 (regressionFit = 0,456127, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,439748 (regressionFit = 0,439745, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), male(B).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307589 (regressionFit = 0,307586, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), male(B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307656 (regressionFit = 0,307653, penalties=3.04E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), male(C).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(A, C).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8400000000000003E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), siblingof(B, D).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0500000000000004E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, _), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, _), siblingof(B, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.8400000000000003E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(C, D), siblingof(D, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.0500000000000004E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(B, C), siblingof(C, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=2] 'father(A, _) :- siblingof(A, _), siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]' score=-0.3073471598426045
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 0 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants and have picked up 20 bad extensions.
%     Score = -0,456130 (regressionFit = 0,456127, penalties=3.240000000000001E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), male(A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,439748 (regressionFit = 0,439745, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), male(B).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307589 (regressionFit = 0,307586, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), male(B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307589 (regressionFit = 0,307586, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), male(B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.2500000000000006E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, _), siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, _), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, C), siblingof(A, _), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(B, C).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, _), siblingof(B, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.0400000000000005E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(A, _), siblingof(A, C), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=2.9400000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), siblingof(A, C), siblingof(C, B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307348 (regressionFit = 0,307345, penalties=3.1500000000000003E-6) for clause:  father(A, _) :- siblingof(A, _), siblingof(A, B), siblingof(B, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=2] 'father(A, _) :- siblingof(A, B), male(B).  [covers 7,0/12,0 pos, 0,0/0,0 neg]' score=-0.3075883659408813
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,409026 (regressionFit = 0,409023, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), male(A).  [covers 5,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,338889 (regressionFit = 0,338886, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), male(B).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307589 (regressionFit = 0,307586, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(A, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307589 (regressionFit = 0,307586, penalties=3.0300000000000002E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, A).  [covers 7,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(A, C), male(C), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307589 (regressionFit = 0,307586, penalties=3.1400000000000013E-6) for clause:  father(A, _) :- siblingof(A, B), male(B), siblingof(B, _).  [covers 7,0/12,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=2] 'father(A, B) :- male(B), siblingof(A, _).  [covers 6,0/12,0 pos, 0,0/0,0 neg]' score=-0.3081256669408829
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -0,407864 (regressionFit = 0,407861, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), male(A).  [covers 4,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,307433 (regressionFit = 0,307430, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), male(C).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,308127 (regressionFit = 0,308124, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(A, _).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, A).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(B, C).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  father(A, B) :- male(B), siblingof(A, _), siblingof(B, _).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,308126 (regressionFit = 0,308124, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, A).  [covers 6,0/12,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, B).  [covers 2,0/12,0 pos, 0,0/0,0 neg]
%     Score = -0,308127 (regressionFit = 0,308124, penalties=3.04E-6) for clause:  father(A, B) :- male(B), siblingof(A, C), siblingof(C, _).  [covers 6,0/12,0 pos, 0,0/0,0 neg]

***** Warning: #4 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]

% The best node found: father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]
Setting -0.04693233466980938 for 
 // Learned this clause on outer loop cycle #2.  It scores=-0,22 and has recall=0,74, precision=0,99, and F1=0,85 (using m-estimates).
 // It covers 75,0% of the positive examples, 9 of 12 (of which 4 are newly covered),
 // So far 9 (75,0%) of the positive examples have been covered.
(father(D, E) :- male(E))

% On cycle #2, the best clause found is:
%      father(_, A) :- male(A).  [covers 9,0/12,0 pos, 0,0/0,0 neg]
% This clause covers 9 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 75,0% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.1873743278756333 to wgt = 0,1874 (father(A, B) :- male(B), childof(B, A))
Added -0.04693233466980938 to wgt = -0,0469 (father(_, A) :- male(A))
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model.ckpt
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for father.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
father(D, E, Total) :- // A general accessor. 
   father(D, E, 1000000, Total), !.
father(D, E, Total) :- waitHere("This should not fail", father(D, E, Total)).

father(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_father_tree1(D, E, TreesToUse, Total1),
   getScore_father_tree2(D, E, TreesToUse, Total2),
   getScore_father_tree3(D, E, TreesToUse, Total3),
   getScore_father_tree4(D, E, TreesToUse, Total4),
   getScore_father_tree5(D, E, TreesToUse, Total5),
   getScore_father_tree6(D, E, TreesToUse, Total6),
   getScore_father_tree7(D, E, TreesToUse, Total7),
   getScore_father_tree8(D, E, TreesToUse, Total8),
   getScore_father_tree9(D, E, TreesToUse, Total9),
   getScore_father_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
father(D, E, TreesToUse, Total) :- waitHere("This should not fail", father(D, E, TreesToUse, Total)).

getScore_father_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_father_tree1(D, E, TreesToUse, Total1) :- father_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_father_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_father_tree2(D, E, TreesToUse, Total2) :- father_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_father_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_father_tree3(D, E, TreesToUse, Total3) :- father_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_father_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_father_tree4(D, E, TreesToUse, Total4) :- father_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_father_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_father_tree5(D, E, TreesToUse, Total5) :- father_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_father_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_father_tree6(D, E, TreesToUse, Total6) :- father_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_father_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_father_tree7(D, E, TreesToUse, Total7) :- father_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_father_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_father_tree8(D, E, TreesToUse, Total8) :- father_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_father_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_father_tree9(D, E, TreesToUse, Total9) :- father_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_father_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_father_tree10(D, E, TreesToUse, Total10) :- father_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(0, []).
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 3 14 15 17 18 30 31 37 43 55
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 97,0/97,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 97,0/97,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'father(_, _).  [covers 97,0/97,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants and have picked up 5 bad extensions.
%     Score = -429,606650 (regressionFit = 429,606649, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 74,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -429,606650): father(A, _) :- male(A).  [covers 74,0/97,0 pos, 0,0/0,0 neg]
%     Score = -400,567660 (regressionFit = 400,567659, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 78,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -400,567660): father(_, A) :- male(A).  [covers 78,0/97,0 pos, 0,0/0,0 neg]
%     Score = -208,981358 (regressionFit = 208,981357, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 55,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -208,981358): father(A, B) :- childof(B, A).  [covers 55,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827095 (regressionFit = 73,827094, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(A, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -73,827095): father(A, B) :- siblingof(A, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -394,475235 (regressionFit = 394,475234, penalties=1.23E-6) for clause:  father(A, _) :- siblingof(A, _).  [covers 53,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827095 (regressionFit = 73,827094, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827095 (regressionFit = 73,827094, penalties=1.23E-6) for clause:  father(_, A) :- siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'father(A, B) :- siblingof(A, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]' score=-73.82709488527205
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(A, B), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(A, B), male(B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'father(A, B) :- siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]' score=-73.82709488527205
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(B, A), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- siblingof(B, A), male(B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, A), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0300000000000005E-6) for clause:  father(A, B) :- siblingof(B, A), siblingof(B, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'father(_, A) :- siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]' score=-73.82709509527206
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 0 variant children.  Sending 11 items to OPEN for evaluation and possible insertion.
% Have created 11 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.1300000000000004E-6) for clause:  father(A, B) :- siblingof(B, _), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.2300000000000002E-6) for clause:  father(_, A) :- siblingof(A, _), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.1300000000000004E-6) for clause:  father(_, A) :- siblingof(A, B), male(B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.1400000000000003E-6) for clause:  father(A, B) :- siblingof(B, _), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.24E-6) for clause:  father(_, A) :- siblingof(A, _), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=1.93E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.0300000000000005E-6) for clause:  father(_, A) :- siblingof(A, B), siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827096 (regressionFit = 73,827094, penalties=2.1400000000000003E-6) for clause:  father(_, A) :- siblingof(A, B), siblingof(B, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'father(A, B) :- siblingof(A, B), siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]' score=-73.82709578527205
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.920000000000001E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, A), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.920000000000001E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, A), male(B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9300000000000003E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, A), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9300000000000003E-6) for clause:  father(A, B) :- siblingof(A, B), siblingof(B, A), siblingof(B, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'father(A, B) :- siblingof(B, C), siblingof(A, C).  [covers 13,0/97,0 pos, 0,0/0,0 neg]' score=-73.82709579527204
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), male(B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), male(C).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), siblingof(A, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), siblingof(B, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), siblingof(C, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), siblingof(C, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(A, C), siblingof(C, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'father(A, B) :- siblingof(B, C), siblingof(C, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]' score=-73.82709579527204
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 0 variant children.  Sending 10 items to OPEN for evaluation and possible insertion.
% Have created 10 valid-on-seeds descendants and have picked up 12 bad extensions.
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), male(B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9300000000000007E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), male(C).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), siblingof(A, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), siblingof(A, C).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), siblingof(B, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.8300000000000004E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), siblingof(C, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.9400000000000002E-6) for clause:  father(A, B) :- siblingof(B, C), siblingof(C, A), siblingof(C, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'father(A, B) :- siblingof(A, B), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]' score=-73.82709588527204
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.920000000000001E-6) for clause:  father(A, B) :- siblingof(A, B), male(A), male(B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, B), male(A), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.920000000000001E-6) for clause:  father(A, B) :- siblingof(A, B), male(A), siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, B), male(A), siblingof(B, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=2] 'father(A, B) :- siblingof(A, B), male(B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]' score=-73.82709588527204
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 6 bad extensions.
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.920000000000001E-6) for clause:  father(A, B) :- siblingof(A, B), male(B), male(A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, B), male(B), siblingof(A, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=2.920000000000001E-6) for clause:  father(A, B) :- siblingof(A, B), male(B), siblingof(B, A).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
%     Score = -73,827097 (regressionFit = 73,827094, penalties=3.0300000000000002E-6) for clause:  father(A, B) :- siblingof(A, B), male(B), siblingof(B, _).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

***** Warning: #5 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: father(A, B) :- siblingof(A, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- siblingof(A, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
Setting -0.8500191805873526 for 
 // Learned this clause on outer loop cycle #1.  It scores=-73,83 and has recall=0,13, precision=0,99, and F1=0,24 (using m-estimates).
 // It covers 13,4% of the positive examples, 13 of 97 (of which 2 are newly covered),
(father(D, E) :- siblingof(D, E))

% On cycle #1, the best clause found is:
%      father(A, B) :- siblingof(A, B).  [covers 13,0/97,0 pos, 0,0/0,0 neg]
% This clause covers 13 positive examples, of which 2 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 2,1% of the positive examples and NaN% of the negatives.}

% Have these 4 positive seeds: 8 41 56 74
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = father(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  father(_, _).  [covers 97,0/97,0 pos, 0,0/0,0 neg]
% Most-general root: father(_, _).  [covers 97,0/97,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'father(_, _).  [covers 97,0/97,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -408,160185 (regressionFit = 408,160184, penalties=1.12E-6) for clause:  father(A, _) :- male(A).  [covers 74,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -408,160185): father(A, _) :- male(A).  [covers 74,0/97,0 pos, 0,0/0,0 neg]
%     Score = -316,807769 (regressionFit = 316,807767, penalties=1.12E-6) for clause:  father(_, A) :- male(A).  [covers 78,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -316,807769): father(_, A) :- male(A).  [covers 78,0/97,0 pos, 0,0/0,0 neg]
%     Score = -254,314508 (regressionFit = 254,314507, penalties=1.0200000000000002E-6) for clause:  father(A, B) :- childof(B, A).  [covers 55,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -254,314508): father(A, B) :- childof(B, A).  [covers 55,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'father(A, B) :- childof(B, A).  [covers 55,0/97,0 pos, 0,0/0,0 neg]' score=-254.31450769266877
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -67,821195 (regressionFit = 67,821193, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(A).  [covers 40,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -67,821195): father(A, B) :- childof(B, A), male(A).  [covers 40,0/97,0 pos, 0,0/0,0 neg]
%     Score = -57,244262 (regressionFit = 57,244260, penalties=2.0200000000000006E-6) for clause:  father(A, B) :- childof(B, A), male(B).  [covers 50,0/97,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -57,244262): father(A, B) :- childof(B, A), male(B).  [covers 50,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'father(A, B) :- childof(B, A), male(B).  [covers 50,0/97,0 pos, 0,0/0,0 neg]' score=-57.244261968557815
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -67,821196 (regressionFit = 67,821193, penalties=2.920000000000001E-6) for clause:  father(A, B) :- childof(B, A), male(B), male(A).  [covers 40,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'father(A, B) :- childof(B, A), male(A).  [covers 40,0/97,0 pos, 0,0/0,0 neg]' score=-67.82119535756026
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -67,821196 (regressionFit = 67,821193, penalties=2.920000000000001E-6) for clause:  father(A, B) :- childof(B, A), male(A), male(B).  [covers 40,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'father(_, A) :- male(A).  [covers 78,0/97,0 pos, 0,0/0,0 neg]' score=-316.80776857320444
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -292,877905 (regressionFit = 292,877903, penalties=1.9200000000000003E-6) for clause:  father(A, B) :- male(B), male(A).  [covers 65,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=2] 'father(A, B) :- male(B), male(A).  [covers 65,0/97,0 pos, 0,0/0,0 neg]' score=-292.8779053381737
%  At # nodes expanded = 6, |OPEN| = 1.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants and have picked up 7 bad extensions.
%     Score = -67,821196 (regressionFit = 67,821193, penalties=2.920000000000001E-6) for clause:  father(A, B) :- male(B), male(A), childof(B, A).  [covers 40,0/97,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'father(A, _) :- male(A).  [covers 74,0/97,0 pos, 0,0/0,0 neg]' score=-408.1601848215616
%  At # nodes expanded = 7, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 7 bad extensions.

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 50,0/97,0 pos, 0,0/0,0 neg]

% The best node found: father(A, B) :- childof(B, A), male(B).  [covers 50,0/97,0 pos, 0,0/0,0 neg]
Setting 3.9102761885431185 for 
 // Learned this clause on outer loop cycle #2.  It scores=-57,24 and has recall=0,51, precision=1,00, and F1=0,68 (using m-estimates).
 // It covers 51,5% of the positive examples, 50 of 97 (of which 5 are newly covered),
 // So far 7 (7,2%) of the positive examples have been covered.
(father(D, E) :- childof(E, D), male(E))

% On cycle #2, the best clause found is:
%      father(A, B) :- childof(B, A), male(B).  [covers 50,0/97,0 pos, 0,0/0,0 neg]
% This clause covers 50 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 7,2% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added -0.8500191805873526 to wgt = -0,8500 (father(A, B) :- siblingof(A, B))
Added 3.9102761885431185 to wgt = 3,9103 (father(A, B) :- childof(B, A), male(B))
% Time taken to learn model for 'father': 4,680 seconds.
% Saving model in: datasets\Toy-Father\train/models/bRDNs/father.model
cached groundings hit: 0
Misses: 0

% Switching to standard-logic notation for variables; previous setting = uppercase

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.


// Closed by a createDribble call with file = datasets\Toy-Father\train/train.txt
