% Running on host: DESKTOP-0S2LA4F

% Creating string handler #1.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Switching to VarIndicator = questionMarks.

% getInputArgWithDefaultValue: args=[datasets\sample-imdb\train/train_pos.txt, datasets\sample-imdb\train/train_neg.txt, datasets\sample-imdb\train/train_bk.txt, datasets\sample-imdb\train/train_facts.txt, null]
%  for N=0: args[N]=datasets\sample-imdb\train/train_pos.txt

% getInputArgWithDefaultValue: args=[datasets\sample-imdb\train/train_pos.txt, datasets\sample-imdb\train/train_neg.txt, datasets\sample-imdb\train/train_bk.txt, datasets\sample-imdb\train/train_facts.txt, null]
%  for N=1: args[N]=datasets\sample-imdb\train/train_neg.txt

% getInputArgWithDefaultValue: args=[datasets\sample-imdb\train/train_pos.txt, datasets\sample-imdb\train/train_neg.txt, datasets\sample-imdb\train/train_bk.txt, datasets\sample-imdb\train/train_facts.txt, null]
%  for N=2: args[N]=datasets\sample-imdb\train/train_bk.txt

% getInputArgWithDefaultValue: args=[datasets\sample-imdb\train/train_pos.txt, datasets\sample-imdb\train/train_neg.txt, datasets\sample-imdb\train/train_bk.txt, datasets\sample-imdb\train/train_facts.txt, null]
%  for N=3: args[N]=datasets\sample-imdb\train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = questionMarks.
% Reading background theory from dir: null
% Load '../imdb_bk.txt'.

% Switching to Prolog notation for variables; previous setting = questionMarks

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = questionMarks.
% LoadAllModes() called.  Currently loaded modes: []

% Switching to Prolog notation for variables; previous setting = questionMarks

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = questionMarks.

% Switching to Prolog notation for variables; previous setting = questionMarks

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = questionMarks.

% Switching to Prolog notation for variables; previous setting = questionMarks

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = questionMarks.

% Switching to Prolog notation for variables; previous setting = questionMarks

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = questionMarks.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 187 facts.

%  LearnOneClause initialized.
% Have read 0 examples from 'datasets\sample-imdb\train' [datasets\sample-imdb\train/train*].
% Have read 0 examples from 'datasets\sample-imdb\train' [datasets\sample-imdb\train/train*].

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.

***** Warning: targetPredicates=null *****


***** Warning: targetArgSpecs=null *****

% Time to collect constants: 9 milliseconds
% Time to collect examples: 0 seconds

% Read 0 pos examples and 0 neg examples.
% Time to init learnOneClause: 14 milliseconds

% 'models/domain_sizes.txt' saved.
File: datasets\sample-imdb\train/advice.txt doesnt exist.Hence no advice loaded
% Learning 20 trees in this iteration for movie

% Learn model for: movie
% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:12 milliseconds
No hidden examples for : movie
Time to build dataset: 17 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #297 as the next seed: movie(arosenheimcopsdie, amiguelferrer)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (0):
%    
%  Modes (46):
%    female(+person),
%    director(+person),
%    actor(+person),
%    recursive_movie(+movie, `person),
%    genre(+person, +genre),
%    genre(+person, -genre),
%    genre(-person, +genre),
%    workedunder(+person, +person),
%    workedunder(+person, -person),
%    workedunder(-person, +person),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
% [ LazyGroundClauseIndex ]  Building full index for female/1 with 22 assertions.
% [ LazyGroundClauseIndex ]  Building full index for director/1 with 6 assertions.
% [ LazyGroundClauseIndex ]  Building full index for actor/1 with 61 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for genre/2.
% [ LazyGroundClauseIndex ]  Building full index for workedunder/2 with 21 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for workedunder/2.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for workedunder/2.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,150131 (regressionFit = 66,150129, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,150131 (regressionFit = 66,150129, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,261288 (regressionFit = 66,261287, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,150813 (regressionFit = 66,150812, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,324641 (regressionFit = 66,324640, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.08204245246029683 for 
 // Learned this clause on outer loop cycle #1.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #806 as the next seed: movie(abadlands2005, apatricejuiff)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 7.137100586234147E-16 for 
 // Learned this clause on outer loop cycle #2.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #523 as the next seed: movie(anerolio, aivantonev)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -5.596599738668141E-16 for 
 // Learned this clause on outer loop cycle #3.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #3, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #294 as the next seed: movie(arosenheimcopsdie, adavidmorrissey)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #4, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.640089860198305E-16 for 
 // Learned this clause on outer loop cycle #4.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #4, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 4 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #813 as the next seed: movie(abadlands2005, abraunbettinai)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -5.641420345224479E-16 for 
 // Learned this clause on outer loop cycle #5.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #5, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 5 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.238 as the next seed: movie(alegendazapaisiy, amarccaleb)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.595269253641966E-16 for 
 // Learned this clause on outer loop cycle #6.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #6, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 6 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #785 as the next seed: movie(abadlands2005, aludwigbriand)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #7, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.194205359031854E-16 for 
 // Learned this clause on outer loop cycle #7.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #7, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 7 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.265 as the next seed: movie(alegendazapaisiy, anikoladadov)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #8, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.629133711928978E-16 for 
 // Learned this clause on outer loop cycle #8.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #8, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 8 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.231 as the next seed: movie(alegendazapaisiy, asaromiano)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #9, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.161004909730862E-16 for 
 // Learned this clause on outer loop cycle #9.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #9, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 9 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #651 as the next seed: movie(agrandpatronle, amillergeorgei)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #10, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.991018609309785E-16 for 
 // Learned this clause on outer loop cycle #10.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #10, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 10 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #479 as the next seed: movie(asaramay, adontiffany)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #11, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.153368806391634E-16 for 
 // Learned this clause on outer loop cycle #11.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #11, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 11 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #699 as the next seed: movie(agrandpatronle, anikoladadov)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #12, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.993674645253864E-16 for 
 // Learned this clause on outer loop cycle #12.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #12, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 12 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #506 as the next seed: movie(asaramay, adillonmoen)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #13, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.151044774940564E-16 for 
 // Learned this clause on outer loop cycle #13.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #13, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 13 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #171 as the next seed: movie(abeautifuljoe, apatricejuiff)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #14, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.999650726128043E-16 for 
 // Learned this clause on outer loop cycle #14.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #14, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 14 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.016 as the next seed: movie(aunetunfontsix, aneilmaskell)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #15, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -5.726413495435018E-16 for 
 // Learned this clause on outer loop cycle #15.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #15, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 15 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #648 as the next seed: movie(agrandpatronle, aindiravarma)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #16, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.002973238112277E-16 for 
 // Learned this clause on outer loop cycle #16.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #16, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 16 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.209 as the next seed: movie(alegendazapaisiy, abillcable)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #17, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.153368806391634E-16 for 
 // Learned this clause on outer loop cycle #17.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #17, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 17 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.018 as the next seed: movie(aunetunfontsix, astanleytucci)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #18, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.993674645253864E-16 for 
 // Learned this clause on outer loop cycle #18.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #18, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 18 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #389 as the next seed: movie(aplayerthe, abillcable)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #19, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.151044774940564E-16 for 
 // Learned this clause on outer loop cycle #19.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #19, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 19 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #612 as the next seed: movie(aribellela, alewissmith)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #20, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.999650726128043E-16 for 
 // Learned this clause on outer loop cycle #20.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #20, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 20 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (20).

% ******************************************
adding regression values
Added -0.08204245246029683 to wgt = -0,0820 (movie(_, A) :- female(A))
Added 7.137100586234147E-16 to wgt = 7,137e-16 (movie(_, A) :- female(A))
Added -5.596599738668141E-16 to wgt = -5,597e-16 (movie(_, A) :- female(A))
Added 6.640089860198305E-16 to wgt = 6,640e-16 (movie(_, A) :- female(A))
Added -5.641420345224479E-16 to wgt = -5,641e-16 (movie(_, A) :- female(A))
Added 6.595269253641966E-16 to wgt = 6,595e-16 (movie(_, A) :- female(A))
Added -7.194205359031854E-16 to wgt = -7,194e-16 (movie(_, A) :- female(A))
Added 6.629133711928978E-16 to wgt = 6,629e-16 (movie(_, A) :- female(A))
Added -7.161004909730862E-16 to wgt = -7,161e-16 (movie(_, A) :- female(A))
Added 6.991018609309785E-16 to wgt = 6,991e-16 (movie(_, A) :- female(A))
Added -7.153368806391634E-16 to wgt = -7,153e-16 (movie(_, A) :- female(A))
Added 6.993674645253864E-16 to wgt = 6,994e-16 (movie(_, A) :- female(A))
Added -7.151044774940564E-16 to wgt = -7,151e-16 (movie(_, A) :- female(A))
Added 6.999650726128043E-16 to wgt = 7,000e-16 (movie(_, A) :- female(A))
Added -5.726413495435018E-16 to wgt = -5,726e-16 (movie(_, A) :- female(A))
Added 6.002973238112277E-16 to wgt = 6,003e-16 (movie(_, A) :- female(A))
Added -7.153368806391634E-16 to wgt = -7,153e-16 (movie(_, A) :- female(A))
Added 6.993674645253864E-16 to wgt = 6,994e-16 (movie(_, A) :- female(A))
Added -7.151044774940564E-16 to wgt = -7,151e-16 (movie(_, A) :- female(A))
Added 6.999650726128043E-16 to wgt = 7,000e-16 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 1 trees is 2,958 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:400 milliseconds
No hidden examples for : movie
Time to build dataset: 463 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #373 as the next seed: movie(aoceanseleven, acatherinezetajones)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,212455 (regressionFit = 66,212454, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,212455 (regressionFit = 66,212454, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,324729 (regressionFit = 66,324727, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,215993 (regressionFit = 66,215992, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,386965 (regressionFit = 66,386964, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.07234583689924357 for 
 // Learned this clause on outer loop cycle #1.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #715 as the next seed: movie(abasicinstinct2, amillergeorgei)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -5.599587779105231E-16 for 
 // Learned this clause on outer loop cycle #2.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #615 as the next seed: movie(aribellela, asalvatorelazzaro)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.637101819761216E-16 for 
 // Learned this clause on outer loop cycle #3.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #3, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #208 as the next seed: movie(aspasenieto, acarmelogalati)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #4, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.068043651688085E-16 for 
 // Learned this clause on outer loop cycle #4.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #4, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 4 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #526 as the next seed: movie(anerolio, astanleyanderson)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.993674645253864E-16 for 
 // Learned this clause on outer loop cycle #5.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #5, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 5 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #642 as the next seed: movie(aribellela, aulrichmhe)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.066051624730026E-16 for 
 // Learned this clause on outer loop cycle #6.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #6, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 6 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #319 as the next seed: movie(arosenheimcopsdie, ahristodinev)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #7, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.994006649746874E-16 for 
 // Learned this clause on outer loop cycle #7.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #7, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 7 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #482 as the next seed: movie(asaramay, abruceayoung)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #8, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.065387615744006E-16 for 
 // Learned this clause on outer loop cycle #8.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #8, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 8 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #38 as the next seed: movie(asaramay, avannifois)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #9, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.999650726128043E-16 for 
 // Learned this clause on outer loop cycle #9.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #9, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 9 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #799 as the next seed: movie(abadlands2005, abruceayoung)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #10, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -5.641420345224479E-16 for 
 // Learned this clause on outer loop cycle #10.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #10, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 10 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (10).

% ******************************************
adding regression values
Added -0.07234583689924357 to wgt = -0,0723 (movie(_, A) :- female(A))
Added -5.599587779105231E-16 to wgt = -5,600e-16 (movie(_, A) :- female(A))
Added 6.637101819761216E-16 to wgt = 6,637e-16 (movie(_, A) :- female(A))
Added -7.068043651688085E-16 to wgt = -7,068e-16 (movie(_, A) :- female(A))
Added 6.993674645253864E-16 to wgt = 6,994e-16 (movie(_, A) :- female(A))
Added -7.066051624730026E-16 to wgt = -7,066e-16 (movie(_, A) :- female(A))
Added 6.994006649746874E-16 to wgt = 6,994e-16 (movie(_, A) :- female(A))
Added -7.065387615744006E-16 to wgt = -7,065e-16 (movie(_, A) :- female(A))
Added 6.999650726128043E-16 to wgt = 7,000e-16 (movie(_, A) :- female(A))
Added -5.641420345224479E-16 to wgt = -5,641e-16 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 2 trees is 3,872 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:301 milliseconds
No hidden examples for : movie
Time to build dataset: 318 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #726 as the next seed: movie(abasicinstinct2, asciveresmarianna)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,302759 (regressionFit = 66,302758, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,302759 (regressionFit = 66,302758, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,416650 (regressionFit = 66,416648, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,309934 (regressionFit = 66,309933, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,477269 (regressionFit = 66,477268, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.06426703529637673 for 
 // Learned this clause on outer loop cycle #1.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #44 as the next seed: movie(aunetunfontsix, apatricejuiff)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -5.641420345224479E-16 for 
 // Learned this clause on outer loop cycle #2.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #11 as the next seed: movie(apelicanbriefthe, astanleyanderson)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.595269253641966E-16 for 
 // Learned this clause on outer loop cycle #3.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #3, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #956 as the next seed: movie(abasicinstinct, astanleytucci)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #4, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.194205359031854E-16 for 
 // Learned this clause on outer loop cycle #4.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #4, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 4 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #284 as the next seed: movie(arosenheimcopsdie, asaromiano)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.629133711928978E-16 for 
 // Learned this clause on outer loop cycle #5.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #5, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 5 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #926 as the next seed: movie(abasicinstinct, adavidmorrissey)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.161004909730862E-16 for 
 // Learned this clause on outer loop cycle #6.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #6, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 6 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (6).

% ******************************************
adding regression values
Added -0.06426703529637673 to wgt = -0,0643 (movie(_, A) :- female(A))
Added -5.641420345224479E-16 to wgt = -5,641e-16 (movie(_, A) :- female(A))
Added 6.595269253641966E-16 to wgt = 6,595e-16 (movie(_, A) :- female(A))
Added -7.194205359031854E-16 to wgt = -7,194e-16 (movie(_, A) :- female(A))
Added 6.629133711928978E-16 to wgt = 6,629e-16 (movie(_, A) :- female(A))
Added -7.161004909730862E-16 to wgt = -7,161e-16 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 3 trees is 4,378 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:199 milliseconds
No hidden examples for : movie
Time to build dataset: 222 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #305 as the next seed: movie(arosenheimcopsdie, ageorgistamatov)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,406105 (regressionFit = 66,406104, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,406105 (regressionFit = 66,406104, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,521846 (regressionFit = 66,521845, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,417241 (regressionFit = 66,417239, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,580615 (regressionFit = 66,580614, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.05744949233608133 for 
 // Learned this clause on outer loop cycle #1.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #451 as the next seed: movie(aplayerthe, astanleytucci)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -5.632456223913212E-16 for 
 // Learned this clause on outer loop cycle #2.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #555 as the next seed: movie(anerolio, awayneknight)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.605893397418284E-16 for 
 // Learned this clause on outer loop cycle #3.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #3, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.244 as the next seed: movie(alegendazapaisiy, alloydalan)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #4, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -7.183581215255536E-16 for 
 // Learned this clause on outer loop cycle #4.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #4, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 4 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}
% Have selected pos example #547 as the next seed: movie(anerolio, adavidmorrissey)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,263673 (regressionFit = 68,263672, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,412680 (regressionFit = 68,412679, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,340542 (regressionFit = 68,340541, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -68,438184 (regressionFit = 68,438182, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.639757855705295E-16 for 
 // Learned this clause on outer loop cycle #5.  It scores=-66,14 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 418 (32,8%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #5, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 5 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (5).

% ******************************************
adding regression values
Added -0.05744949233608133 to wgt = -0,0574 (movie(_, A) :- female(A))
Added -5.632456223913212E-16 to wgt = -5,632e-16 (movie(_, A) :- female(A))
Added 6.605893397418284E-16 to wgt = 6,606e-16 (movie(_, A) :- female(A))
Added -7.183581215255536E-16 to wgt = -7,184e-16 (movie(_, A) :- female(A))
Added 6.639757855705295E-16 to wgt = 6,640e-16 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 4 trees is 4,769 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:201 milliseconds
No hidden examples for : movie
Time to build dataset: 217 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #500 as the next seed: movie(asaramay, acatherinezetajones)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -66,136365 (regressionFit = 66,136364, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -66,136365): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,513925 (regressionFit = 66,513924, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,513925 (regressionFit = 66,513924, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,631598 (regressionFit = 66,631596, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,529084 (regressionFit = 66,529083, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,688436 (regressionFit = 66,688434, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-66.13636475636402
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,136366 (regressionFit = 66,136364, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,449060 (regressionFit = 66,449058, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-66.51392523529758
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,631599 (regressionFit = 66,631596, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,688437 (regressionFit = 66,688434, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-66.51392523529829
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -66,136366 (regressionFit = 66,136364, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,529085 (regressionFit = 66,529083, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-66.52908413723196
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -66,449060 (regressionFit = 66,449058, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,529085 (regressionFit = 66,529083, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,529085 (regressionFit = 66,529083, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
% [ LazyGroundClauseIndex ]  Building full index for recursive_movie/2 with 70 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for recursive_movie/2.
%     Score = -47,575055 (regressionFit = 47,575053, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,575055): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -67,066436 (regressionFit = 67,066434, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,529085 (regressionFit = 66,529083, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,804980 (regressionFit = 66,804977, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-66.6315976641032
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for genre/2.
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,631599 (regressionFit = 66,631596, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,781924 (regressionFit = 66,781922, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,593021 (regressionFit = 66,593019, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,733288 (regressionFit = 66,733286, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-66.68843559545263
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,652000 (regressionFit = 66,651998, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,688437 (regressionFit = 66,688434, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,688436 (regressionFit = 66,688434, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -63,450063 (regressionFit = 63,450061, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -67,086266 (regressionFit = 67,086264, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,688437 (regressionFit = 66,688434, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -66,870858 (regressionFit = 66,870856, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.8653894048261028 for 
 // Learned this clause on outer loop cycle #1.  It scores=-47,58 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon6025), recursive_movie(D, Anon6025))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.060 as the next seed: movie(akristali, apieradegliesposti)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -47,222938 (regressionFit = 47,222937, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,222938): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,752001 (regressionFit = 47,751999, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,752001 (regressionFit = 47,751999, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,863078 (regressionFit = 47,863076, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,085934 (regressionFit = 47,085933, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,085934): movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,926511 (regressionFit = 47,926510, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.08593379362924
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -47,751734 (regressionFit = 47,751732, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,085935 (regressionFit = 47,085933, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,085935 (regressionFit = 47,085933, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,575055 (regressionFit = 47,575053, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,514528 (regressionFit = 48,514525, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,085935 (regressionFit = 47,085933, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,760377 (regressionFit = 47,760375, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.2229380620902
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,222939 (regressionFit = 47,222937, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,751734 (regressionFit = 47,751732, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.75200061905097
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,863079 (regressionFit = 47,863076, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,926512 (regressionFit = 47,926510, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.75200061905141
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -47,222939 (regressionFit = 47,222937, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,085935 (regressionFit = 47,085933, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.863077690553105
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,863079 (regressionFit = 47,863076, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,013404 (regressionFit = 48,013402, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,824501 (regressionFit = 47,824499, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,964768 (regressionFit = 47,964766, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.92651097920601
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,972603 (regressionFit = 47,972601, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,926512 (regressionFit = 47,926510, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,926512 (regressionFit = 47,926510, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,760445 (regressionFit = 45,760443, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,760445): movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,638418 (regressionFit = 48,638415, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,926512 (regressionFit = 47,926510, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,108933 (regressionFit = 48,108931, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.1943399627411877 for 
 // Learned this clause on outer loop cycle #2.  It scores=-45,76 and has recall=0,0055, precision=0,99, and F1=0,01 (using m-estimates).
 // It covers 0,5% of the positive examples, 7 of 1273,
 // So far 28 (2,2%) of the positive examples have been covered.
(movie(D, E) :- workedunder(Anon6971, E), recursive_movie(D, Anon6971))

% On cycle #2, the best clause found is:
%      movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 2,2% of the positive examples and NaN% of the negatives.}
% Have selected pos example #778 as the next seed: movie(abadlands2005, aivantonev)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,252207 (regressionFit = 45,252206, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,252207): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,811261 (regressionFit = 45,811260, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,811261 (regressionFit = 45,811260, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,935155 (regressionFit = 45,935153, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196114 (regressionFit = 45,196113, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,196114): movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,021917 (regressionFit = 46,021916, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.19611398992698
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -45,820984 (regressionFit = 45,820981, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196115 (regressionFit = 45,196113, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196115 (regressionFit = 45,196113, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,639650 (regressionFit = 45,639648, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,612403 (regressionFit = 46,612400, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196115 (regressionFit = 45,196113, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,870557 (regressionFit = 45,870555, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.25220691513066
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,252208 (regressionFit = 45,252206, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,820984 (regressionFit = 45,820981, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.81126145815516
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,935156 (regressionFit = 45,935153, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,021918 (regressionFit = 46,021916, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.81126145815563
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -45,252208 (regressionFit = 45,252206, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196115 (regressionFit = 45,196113, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.93515452463522
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,935156 (regressionFit = 45,935153, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,122896 (regressionFit = 46,122894, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,896379 (regressionFit = 45,896377, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,059503 (regressionFit = 46,059500, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #3, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.02191682022728
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,028559 (regressionFit = 46,028557, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,021918 (regressionFit = 46,021916, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,021918 (regressionFit = 46,021916, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,541784 (regressionFit = 45,541782, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,645514 (regressionFit = 46,645512, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,021918 (regressionFit = 46,021916, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,254510 (regressionFit = 46,254508, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #3, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.1250195613426893 for 
 // Learned this clause on outer loop cycle #3.  It scores=-45,20 and has recall=0,31, precision=1,00, and F1=0,48 (using m-estimates).
 // It covers 31,3% of the positive examples, 399 of 1273 (of which 378 are newly covered),
 // So far 406 (31,9%) of the positive examples have been covered.
(movie(D, E) :- workedunder(E, Anon7919))

% On cycle #3, the best clause found is:
%      movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 399 positive examples, of which 378 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 31,9% of the positive examples and NaN% of the negatives.}
% Have selected pos example #120 as the next seed: movie(aoceanstwelve, anikoladadov)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #4, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -46,595003 (regressionFit = 46,595002, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,595003): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,540950 (regressionFit = 46,540948, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,540950): movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,540950 (regressionFit = 46,540948, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,540950): movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,758667 (regressionFit = 46,758666, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196114 (regressionFit = 45,196113, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,196114): movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,751605 (regressionFit = 46,751604, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.196113989926936
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -46,102550 (regressionFit = 46,102548, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196115 (regressionFit = 45,196113, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196115 (regressionFit = 45,196113, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,153884 (regressionFit = 46,153882, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,738684 (regressionFit = 45,738682, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196115 (regressionFit = 45,196113, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196105 (regressionFit = 45,196103, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,196105): movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.54094960695747
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -46,595004 (regressionFit = 46,595002, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,196115 (regressionFit = 45,196113, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.54094960695806
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,758668 (regressionFit = 46,758666, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,751606 (regressionFit = 46,751604, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.5950027348725
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,595004 (regressionFit = 46,595002, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,102550 (regressionFit = 46,102548, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.75160496903018
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,681496 (regressionFit = 46,681493, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,751606 (regressionFit = 46,751604, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,751606 (regressionFit = 46,751604, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,122288 (regressionFit = 44,122286, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,122288): movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,821814 (regressionFit = 46,821811, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,751606 (regressionFit = 46,751604, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,984198 (regressionFit = 46,984196, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #4, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.75866700231988
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,758668 (regressionFit = 46,758666, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,946409 (regressionFit = 46,946407, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,719892 (regressionFit = 46,719890, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,883015 (regressionFit = 46,883013, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #4, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.1478673629552515 for 
 // Learned this clause on outer loop cycle #4.  It scores=-44,12 and has recall=0,0055, precision=0,99, and F1=0,01 (using m-estimates).
 // It covers 0,5% of the positive examples, 7 of 1273 (of which 0 are newly covered),
 // So far 406 (31,9%) of the positive examples have been covered.
(movie(D, E) :- workedunder(Anon8865, E), recursive_movie(D, Anon8865))

% On cycle #4, the best clause found is:
%      movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 7 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 4 best clauses covers 31,9% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (4).

% ******************************************
adding regression values
Added 0.8653894048261028 to wgt = 0,8654 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
Added 0.1943399627411877 to wgt = 0,1943 (movie(A, B) :- workedunder(C, B), recursive_movie(A, C))
Added -0.1250195613426893 to wgt = -0,1250 (movie(_, A) :- workedunder(A, _))
Added 0.1478673629552515 to wgt = 0,1479 (movie(A, B) :- workedunder(C, B), recursive_movie(A, C))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 5 trees is 6,223 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:360 milliseconds
No hidden examples for : movie
Time to build dataset: 377 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #2 as the next seed: movie(abadlands2005, alewissmith)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -59,386814 (regressionFit = 59,386813, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -59,386814): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,706419 (regressionFit = 59,706417, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,706419 (regressionFit = 59,706417, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,876615 (regressionFit = 59,876614, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,781761 (regressionFit = 59,781760, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,865372 (regressionFit = 59,865371, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-59.386813909168474
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,386815 (regressionFit = 59,386813, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,673964 (regressionFit = 59,673962, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-59.70641851226747
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,876616 (regressionFit = 59,876614, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,865373 (regressionFit = 59,865371, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-59.70641851226825
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -59,386815 (regressionFit = 59,386813, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,781762 (regressionFit = 59,781760, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-59.78176123203007
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -59,673964 (regressionFit = 59,673962, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,781762 (regressionFit = 59,781760, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,781762 (regressionFit = 59,781760, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,079497 (regressionFit = 45,079495, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,079497): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -60,236722 (regressionFit = 60,236720, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,781762 (regressionFit = 59,781760, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -60,010584 (regressionFit = 60,010582, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-59.86537237264752
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,867972 (regressionFit = 59,867970, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,865373 (regressionFit = 59,865371, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,865373 (regressionFit = 59,865371, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -58,715625 (regressionFit = 58,715623, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -60,226403 (regressionFit = 60,226400, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,865373 (regressionFit = 59,865371, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -60,084921 (regressionFit = 60,084919, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-59.876615272610294
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,876616 (regressionFit = 59,876614, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -60,073037 (regressionFit = 60,073034, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,844579 (regressionFit = 59,844577, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -59,973568 (regressionFit = 59,973566, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.7543264859174821 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,08 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon9829), recursive_movie(D, Anon9829))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}
% Have selected pos example #832 as the next seed: movie(aletztezeugeder, abillcable)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -44,727648 (regressionFit = 44,727647, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,727648): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,223370 (regressionFit = 45,223369, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,223370 (regressionFit = 45,223369, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,376892 (regressionFit = 45,376890, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,917608 (regressionFit = 44,917606, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,382324 (regressionFit = 45,382322, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.72764844499793
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,727649 (regressionFit = 44,727647, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,241322 (regressionFit = 45,241320, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.91760761542056
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -45,241322 (regressionFit = 45,241320, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,917609 (regressionFit = 44,917606, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,917609 (regressionFit = 44,917606, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,079497 (regressionFit = 45,079495, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,014139 (regressionFit = 46,014136, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,917609 (regressionFit = 44,917606, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,459843 (regressionFit = 45,459841, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.22336985326995
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,376893 (regressionFit = 45,376890, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,382325 (regressionFit = 45,382322, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.22336985327096
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -44,727649 (regressionFit = 44,727647, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,917609 (regressionFit = 44,917606, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.37689158532478
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,376893 (regressionFit = 45,376890, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,573313 (regressionFit = 45,573311, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,344855 (regressionFit = 45,344853, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,473845 (regressionFit = 45,473842, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.38232371365
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,441910 (regressionFit = 45,441907, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,382325 (regressionFit = 45,382322, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,382325 (regressionFit = 45,382322, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,102289 (regressionFit = 45,102286, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,981019 (regressionFit = 45,981016, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,382325 (regressionFit = 45,382322, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,601873 (regressionFit = 45,601871, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.0592742286836221 for 
 // Learned this clause on outer loop cycle #2.  It scores=-44,73 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 413 are newly covered),
 // So far 434 (34,1%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 413 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 34,1% of the positive examples and NaN% of the negatives.}
% Have selected pos example #854 as the next seed: movie(aletztezeugeder, asaromiano)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -44,727648 (regressionFit = 44,727647, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,727648): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,526948 (regressionFit = 47,526947, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,526948 (regressionFit = 47,526947, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,712616 (regressionFit = 47,712614, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,168791 (regressionFit = 47,168789, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,685902 (regressionFit = 47,685901, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.727648444997904
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,727649 (regressionFit = 44,727647, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,443356 (regressionFit = 47,443354, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.168790572155956
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -47,443356 (regressionFit = 47,443354, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,168791 (regressionFit = 47,168789, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,168792 (regressionFit = 47,168789, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,514499 (regressionFit = 47,514497, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,054920 (regressionFit = 48,054918, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,168792 (regressionFit = 47,168789, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,554067 (regressionFit = 47,554065, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.52694825174133
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,712617 (regressionFit = 47,712614, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,685903 (regressionFit = 47,685901, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.526948251742844
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -44,727649 (regressionFit = 44,727647, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,168792 (regressionFit = 47,168789, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.68590211212138
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,670828 (regressionFit = 47,670826, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,685903 (regressionFit = 47,685901, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,685903 (regressionFit = 47,685901, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,156710 (regressionFit = 46,156708, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,946425 (regressionFit = 47,946423, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,685903 (regressionFit = 47,685901, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,905451 (regressionFit = 47,905449, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #3, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.712615631078634
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,712617 (regressionFit = 47,712614, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,909037 (regressionFit = 47,909035, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,680579 (regressionFit = 47,680577, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,809569 (regressionFit = 47,809566, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #3, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting 6.898389355760019E-16 for 
 // Learned this clause on outer loop cycle #3.  It scores=-44,73 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 0 are newly covered),
 // So far 434 (34,1%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #3, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 0 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 3 best clauses covers 34,1% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (3).

% ******************************************
adding regression values
Added 0.7543264859174821 to wgt = 0,7543 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
Added -0.0592742286836221 to wgt = -0,0593 (movie(_, A) :- female(A))
Added 6.898389355760019E-16 to wgt = 6,898e-16 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 6 trees is 7,330 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:277 milliseconds
No hidden examples for : movie
Time to build dataset: 293 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #1.066 as the next seed: movie(akristali, adinaconnolly)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -54,291061 (regressionFit = 54,291060, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -54,291061): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,779220 (regressionFit = 54,779218, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,779220 (regressionFit = 54,779218, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,947908 (regressionFit = 54,947907, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,851668 (regressionFit = 54,851667, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,938173 (regressionFit = 54,938172, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-54.291061250607505
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,291062 (regressionFit = 54,291060, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,751513 (regressionFit = 54,751511, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-54.77921953816225
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,947909 (regressionFit = 54,947907, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,938174 (regressionFit = 54,938172, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-54.7792195381632
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -54,291062 (regressionFit = 54,291060, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,851669 (regressionFit = 54,851667, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-54.8516683822258
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -54,751513 (regressionFit = 54,751511, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,851669 (regressionFit = 54,851667, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,851669 (regressionFit = 54,851667, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,240902 (regressionFit = 45,240900, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,240902): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -55,390041 (regressionFit = 55,390039, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,851669 (regressionFit = 54,851667, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -55,125002 (regressionFit = 55,125000, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-54.938173398542304
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,943493 (regressionFit = 54,943491, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,938174 (regressionFit = 54,938172, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,938174 (regressionFit = 54,938172, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -53,837533 (regressionFit = 53,837531, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -55,312403 (regressionFit = 55,312400, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,938174 (regressionFit = 54,938172, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -55,157722 (regressionFit = 55,157720, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-54.94790779616478
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,947909 (regressionFit = 54,947907, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -55,144329 (regressionFit = 55,144327, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -54,915871 (regressionFit = 54,915869, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -55,044861 (regressionFit = 55,044858, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.5945883486348656 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,24 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon12625), recursive_movie(D, Anon12625))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}
% Have selected pos example #386 as the next seed: movie(aoceanseleven, aulrichmhe)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -44,728671 (regressionFit = 44,728670, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,728671): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,371536 (regressionFit = 45,371535, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,371536 (regressionFit = 45,371535, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,526640 (regressionFit = 45,526639, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,054011 (regressionFit = 45,054010, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530489 (regressionFit = 45,530488, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.72867108400266
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,728672 (regressionFit = 44,728670, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,388561 (regressionFit = 45,388559, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.054011082359416
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -45,388561 (regressionFit = 45,388559, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,054012 (regressionFit = 45,054010, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,054012 (regressionFit = 45,054010, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,240902 (regressionFit = 45,240900, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,134424 (regressionFit = 46,134422, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,054012 (regressionFit = 45,054010, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,581338 (regressionFit = 45,581336, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.37153562088906
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,526641 (regressionFit = 45,526639, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530490 (regressionFit = 45,530488, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.371535620890185
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -44,728672 (regressionFit = 44,728670, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,054012 (regressionFit = 45,054010, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.52664032894233
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,526641 (regressionFit = 45,526639, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,723062 (regressionFit = 45,723059, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,494604 (regressionFit = 45,494602, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,623593 (regressionFit = 45,623591, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.530489481269115
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,579679 (regressionFit = 45,579677, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530490 (regressionFit = 45,530488, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530490 (regressionFit = 45,530488, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,107329 (regressionFit = 45,107327, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,089622 (regressionFit = 46,089620, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530490 (regressionFit = 45,530488, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,750039 (regressionFit = 45,750036, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.05345052194231742 for 
 // Learned this clause on outer loop cycle #2.  It scores=-44,73 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 413 are newly covered),
 // So far 434 (34,1%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 413 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 34,1% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.5945883486348656 to wgt = 0,5946 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
Added -0.05345052194231742 to wgt = -0,0535 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 7 trees is 7,914 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:221 milliseconds
No hidden examples for : movie
Time to build dataset: 239 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #262 as the next seed: movie(arosenheimcopsdie, abillcable)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -50,630053 (regressionFit = 50,630052, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50,630053): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,284158 (regressionFit = 51,284157, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,284158 (regressionFit = 51,284157, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,451429 (regressionFit = 51,451428, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,313140 (regressionFit = 51,313139, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,443112 (regressionFit = 51,443111, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-50.63005316122894
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -50,630054 (regressionFit = 50,630052, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,263156 (regressionFit = 51,263153, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-51.28415797303003
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,451430 (regressionFit = 51,451428, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,443113 (regressionFit = 51,443111, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-51.28415797303075
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -50,630054 (regressionFit = 50,630052, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,313141 (regressionFit = 51,313139, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-51.313139905394586
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -51,263156 (regressionFit = 51,263153, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,313141 (regressionFit = 51,313139, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,313141 (regressionFit = 51,313139, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,393264 (regressionFit = 45,393262, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,393264): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,943270 (regressionFit = 51,943267, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,313141 (regressionFit = 51,313139, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,630387 (regressionFit = 51,630385, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-51.44311183341008
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,451224 (regressionFit = 51,451222, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,443113 (regressionFit = 51,443111, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,443113 (regressionFit = 51,443111, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -50,391478 (regressionFit = 50,391476, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,830548 (regressionFit = 51,830545, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,443113 (regressionFit = 51,443111, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,662661 (regressionFit = 51,662659, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-51.45142925777992
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,451430 (regressionFit = 51,451428, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,647851 (regressionFit = 51,647848, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,419393 (regressionFit = 51,419391, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -51,548382 (regressionFit = 51,548380, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.4511996401254773 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,39 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon14495), recursive_movie(D, Anon14495))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}
% Have selected pos example #1.006 as the next seed: movie(aunetunfontsix, aemiliaradeva)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -44,730277 (regressionFit = 44,730276, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,730277): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,511926 (regressionFit = 45,511925, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,511926 (regressionFit = 45,511925, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,668633 (regressionFit = 45,668631, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,184501 (regressionFit = 45,184500, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,670880 (regressionFit = 45,670879, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.730276984183625
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,730278 (regressionFit = 44,730276, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,526749 (regressionFit = 45,526747, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.184500972044226
%  At # nodes expanded = 3, |OPEN| = 5.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -45,526749 (regressionFit = 45,526747, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,184502 (regressionFit = 45,184500, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,184502 (regressionFit = 45,184500, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,393264 (regressionFit = 45,393262, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,251060 (regressionFit = 46,251058, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,184502 (regressionFit = 45,184500, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,699391 (regressionFit = 45,699389, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.511925990815485
%  At # nodes expanded = 4, |OPEN| = 4.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,668634 (regressionFit = 45,668631, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,670881 (regressionFit = 45,670879, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=1] 'movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.51192599081629
%  At # nodes expanded = 5, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -44,730278 (regressionFit = 44,730276, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,184502 (regressionFit = 45,184500, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.668632519974665
%  At # nodes expanded = 6, |OPEN| = 2.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,668634 (regressionFit = 45,668631, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,865054 (regressionFit = 45,865052, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,636596 (regressionFit = 45,636594, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,765585 (regressionFit = 45,765583, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.67087985119554
%  At # nodes expanded = 7, |OPEN| = 1.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), female(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,711669 (regressionFit = 45,711667, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), female(B).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,670881 (regressionFit = 45,670879, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(_, A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,670881 (regressionFit = 45,670879, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(B, A), actor(B).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,128638 (regressionFit = 45,128636, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(C, B), recursive_movie(A, C).  [covers 7,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,197206 (regressionFit = 46,197204, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(_, A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(B, A), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(A, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,670881 (regressionFit = 45,670879, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(B, _).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,890429 (regressionFit = 45,890427, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(_, A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(B, A), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.04850467645396791 for 
 // Learned this clause on outer loop cycle #2.  It scores=-44,73 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 413 are newly covered),
 // So far 434 (34,1%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 413 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 34,1% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.4511996401254773 to wgt = 0,4512 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
Added -0.04850467645396791 to wgt = -0,0485 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 8 trees is 8,418 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:257 milliseconds
No hidden examples for : movie
Time to build dataset: 275 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #930 as the next seed: movie(abasicinstinct, alloydalan)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -48,508465 (regressionFit = 48,508464, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -48,508465): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,312682 (regressionFit = 49,312681, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,312682 (regressionFit = 49,312681, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,479351 (regressionFit = 49,479349, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286333 (regressionFit = 49,286332, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,471636 (regressionFit = 49,471634, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-48.508464843160546
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,508466 (regressionFit = 48,508464, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,297075 (regressionFit = 49,297073, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-48.50846584316054
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,297076 (regressionFit = 49,297073, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-49.28633323344004
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286334 (regressionFit = 49,286332, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286334 (regressionFit = 49,286332, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530330 (regressionFit = 45,530328, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,530330): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,991241 (regressionFit = 49,991239, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286334 (regressionFit = 49,286332, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,636254 (regressionFit = 49,636252, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.53032995424198
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -48,116051 (regressionFit = 48,116048, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,958095 (regressionFit = 46,958092, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,807871 (regressionFit = 45,807868, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-49.286334133440036
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -49,297076 (regressionFit = 49,297073, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286335 (regressionFit = 49,286332, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), director(C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,991242 (regressionFit = 49,991239, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286335 (regressionFit = 49,286332, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,636255 (regressionFit = 49,636252, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-49.28633423344004
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -49,297076 (regressionFit = 49,297073, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286335 (regressionFit = 49,286332, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), actor(B), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,991242 (regressionFit = 49,991239, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286335 (regressionFit = 49,286332, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,636255 (regressionFit = 49,636252, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-49.28633424344004
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 14 variant children.  Sending 27 items to OPEN for evaluation and possible insertion.
% Have created 27 valid-on-seeds descendants.
%     Score = -49,297076 (regressionFit = 49,297073, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286335 (regressionFit = 49,286332, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286335 (regressionFit = 49,286332, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286335 (regressionFit = 49,286332, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), workedunder(B, _), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, _), workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.350000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,991242 (regressionFit = 49,991239, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,991242 (regressionFit = 49,991239, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(B, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,286335 (regressionFit = 49,286332, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,636255 (regressionFit = 49,636252, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,636255 (regressionFit = 49,636252, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]' score=-49.297075302024645
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,297076 (regressionFit = 49,297073, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), director(B).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,297076 (regressionFit = 49,297073, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), actor(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,116051 (regressionFit = 48,116048, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- female(B), workedunder(B, C), recursive_movie(A, C).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,371886 (regressionFit = 49,371883, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), genre(B, _).  [covers 57,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,297076 (regressionFit = 49,297073, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -49,330047 (regressionFit = 49,330044, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(_, B).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #1 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.3471576164546922 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,53 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon16365), recursive_movie(D, Anon16365))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}
% Have selected pos example #946 as the next seed: movie(abasicinstinct, aceceliaannbirt)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -44,729021 (regressionFit = 44,729020, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,729021): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,638147 (regressionFit = 45,638146, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,638147 (regressionFit = 45,638146, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,796427 (regressionFit = 45,796426, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302279 (regressionFit = 45,302278, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,797101 (regressionFit = 45,797099, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.72902123623755
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,729022 (regressionFit = 44,729020, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,651043 (regressionFit = 45,651041, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.72902223623755
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,651044 (regressionFit = 45,651041, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.30227902686769
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302280 (regressionFit = 45,302278, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302280 (regressionFit = 45,302278, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530330 (regressionFit = 45,530328, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,356916 (regressionFit = 46,356914, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302280 (regressionFit = 45,302278, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,806760 (regressionFit = 45,806757, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.30227992686768
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -45,651044 (regressionFit = 45,651041, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302281 (regressionFit = 45,302278, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), director(C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,356917 (regressionFit = 46,356914, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302281 (regressionFit = 45,302278, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,806761 (regressionFit = 45,806757, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=2] 'movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.302280026867685
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -45,651044 (regressionFit = 45,651041, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302281 (regressionFit = 45,302278, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), actor(B), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,356917 (regressionFit = 46,356914, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302281 (regressionFit = 45,302278, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,806761 (regressionFit = 45,806757, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=2] 'movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.302280036867685
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 14 variant children.  Sending 27 items to OPEN for evaluation and possible insertion.
% Have created 27 valid-on-seeds descendants.
%     Score = -45,651044 (regressionFit = 45,651041, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302281 (regressionFit = 45,302278, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302281 (regressionFit = 45,302278, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302281 (regressionFit = 45,302278, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), workedunder(B, _), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, _), workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.350000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,356917 (regressionFit = 46,356914, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,356917 (regressionFit = 46,356914, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(B, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,302281 (regressionFit = 45,302278, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,806761 (regressionFit = 45,806757, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,806761 (regressionFit = 45,806757, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.53032995424198
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -45,548588 (regressionFit = 45,548584, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,579660 (regressionFit = 45,579657, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530331 (regressionFit = 45,530328, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,530321 (regressionFit = 45,530317, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.63814664833658
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,796428 (regressionFit = 45,796426, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,797102 (regressionFit = 45,797099, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #2 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.04428808380610936 for 
 // Learned this clause on outer loop cycle #2.  It scores=-44,73 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 413 are newly covered),
 // So far 434 (34,1%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 413 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 34,1% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.3471576164546922 to wgt = 0,3472 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
Added -0.04428808380610936 to wgt = -0,0443 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 9 trees is 9,300 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:249 milliseconds
No hidden examples for : movie
Time to build dataset: 266 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #135 as the next seed: movie(abeautifuljoe, accilecassel)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -47,316801 (regressionFit = 47,316800, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -47,316801): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,255144 (regressionFit = 48,255142, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,255144 (regressionFit = 48,255142, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,421866 (regressionFit = 48,421865, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178750 (regressionFit = 48,178748, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,414097 (regressionFit = 48,414096, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.31680085432702
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,316802 (regressionFit = 47,316800, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,243080 (regressionFit = 48,243078, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.31680185432702
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,243081 (regressionFit = 48,243078, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-48.17874967187242
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178751 (regressionFit = 48,178748, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178751 (regressionFit = 48,178748, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654819 (regressionFit = 45,654817, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,654819): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,937454 (regressionFit = 48,937452, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178751 (regressionFit = 48,178748, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,550308 (regressionFit = 48,550306, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.65481874063296
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -47,395198 (regressionFit = 47,395195, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,626100 (regressionFit = 46,626097, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,831862 (regressionFit = 45,831859, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-48.17875057187241
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -48,243081 (regressionFit = 48,243078, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178752 (regressionFit = 48,178748, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), director(C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,937455 (regressionFit = 48,937452, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178752 (regressionFit = 48,178748, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,550309 (regressionFit = 48,550306, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-48.178750671872415
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -48,243081 (regressionFit = 48,243078, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178752 (regressionFit = 48,178748, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), actor(B), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,937455 (regressionFit = 48,937452, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178752 (regressionFit = 48,178748, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,550309 (regressionFit = 48,550306, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-48.178750681872415
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 14 variant children.  Sending 27 items to OPEN for evaluation and possible insertion.
% Have created 27 valid-on-seeds descendants.
%     Score = -48,243081 (regressionFit = 48,243078, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178752 (regressionFit = 48,178748, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178752 (regressionFit = 48,178748, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178752 (regressionFit = 48,178748, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), workedunder(B, _), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, _), workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.350000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,937455 (regressionFit = 48,937452, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,937455 (regressionFit = 48,937452, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(B, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,178752 (regressionFit = 48,178748, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,550309 (regressionFit = 48,550306, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,550309 (regressionFit = 48,550306, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]' score=-48.243080008835186
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,243081 (regressionFit = 48,243078, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), director(B).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,243081 (regressionFit = 48,243078, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), actor(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,395198 (regressionFit = 47,395195, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- female(B), workedunder(B, C), recursive_movie(A, C).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,318241 (regressionFit = 48,318238, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), genre(B, _).  [covers 57,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,243081 (regressionFit = 48,243078, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,276601 (regressionFit = 48,276598, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(_, B).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #3 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.2760876098158035 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,65 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon19899), recursive_movie(D, Anon19899))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}
% Have selected pos example #32 as the next seed: movie(abasicinstinct, abruceayoung)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -44,726224 (regressionFit = 44,726222, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -44,726224): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,752777 (regressionFit = 45,752776, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,752777 (regressionFit = 45,752776, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,912579 (regressionFit = 45,912578, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409624 (regressionFit = 45,409623, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,911731 (regressionFit = 45,911729, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.726223545590145
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -44,726225 (regressionFit = 44,726222, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,764138 (regressionFit = 45,764136, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-44.72622454559014
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,764139 (regressionFit = 45,764136, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.4096238120308
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409625 (regressionFit = 45,409623, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409625 (regressionFit = 45,409623, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654819 (regressionFit = 45,654817, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,453884 (regressionFit = 46,453882, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409625 (regressionFit = 45,409623, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,905206 (regressionFit = 45,905204, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.4096247120308
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -45,764139 (regressionFit = 45,764136, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409626 (regressionFit = 45,409623, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), director(C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,453885 (regressionFit = 46,453882, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409626 (regressionFit = 45,409623, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,905207 (regressionFit = 45,905204, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #2, bodyLen=2] 'movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.4096248120308
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -45,764139 (regressionFit = 45,764136, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409626 (regressionFit = 45,409623, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), actor(B), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,453885 (regressionFit = 46,453882, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409626 (regressionFit = 45,409623, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,905207 (regressionFit = 45,905204, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #2, bodyLen=2] 'movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.4096248220308
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 14 variant children.  Sending 27 items to OPEN for evaluation and possible insertion.
% Have created 27 valid-on-seeds descendants.
%     Score = -45,764139 (regressionFit = 45,764136, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409626 (regressionFit = 45,409623, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409626 (regressionFit = 45,409623, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409626 (regressionFit = 45,409623, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), workedunder(B, _), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, _), workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.350000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,453886 (regressionFit = 46,453882, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,453886 (regressionFit = 46,453882, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(B, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,409626 (regressionFit = 45,409623, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,905207 (regressionFit = 45,905204, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,905207 (regressionFit = 45,905204, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #2, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.65481874063296
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -45,671961 (regressionFit = 45,671958, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,702797 (regressionFit = 45,702794, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654820 (regressionFit = 45,654817, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,654809 (regressionFit = 45,654806, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #2, bodyLen=1] 'movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.752776704032435
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), actor(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,912580 (regressionFit = 45,912578, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- director(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,911732 (regressionFit = 45,911729, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- director(A), workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #4 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.04063092255564469 for 
 // Learned this clause on outer loop cycle #2.  It scores=-44,73 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273 (of which 413 are newly covered),
 // So far 434 (34,1%) of the positive examples have been covered.
(movie(D, E) :- female(E))

% On cycle #2, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 413 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 2 best clauses covers 34,1% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (2).

% ******************************************
adding regression values
Added 0.2760876098158035 to wgt = 0,2761 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
Added -0.04063092255564469 to wgt = -0,0406 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model
% Time taken to learn 10 trees is 10,304 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:373 milliseconds
No hidden examples for : movie
Time to build dataset: 399 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #439 as the next seed: movie(aplayerthe, aemiliaradeva)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -46,614192 (regressionFit = 46,614191, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,614192): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,673539 (regressionFit = 47,673538, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,673539 (regressionFit = 47,673538, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,840704 (regressionFit = 47,840703, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555989 (regressionFit = 47,555987, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,832493 (regressionFit = 47,832492, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.61419238527429
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,614193 (regressionFit = 46,614191, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,663628 (regressionFit = 47,663626, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.61419338527429
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,663629 (regressionFit = 47,663626, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.55598867084323
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555990 (regressionFit = 47,555987, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555990 (regressionFit = 47,555987, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,769691 (regressionFit = 45,769689, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,769691): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,352361 (regressionFit = 48,352359, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555990 (regressionFit = 47,555987, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,941463 (regressionFit = 47,941461, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.76969054274485
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -47,026312 (regressionFit = 47,026309, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,769692 (regressionFit = 45,769689, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,769692 (regressionFit = 45,769689, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,475160 (regressionFit = 46,475157, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,769692 (regressionFit = 45,769689, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,890152 (regressionFit = 45,890148, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.555989570843224
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -47,663629 (regressionFit = 47,663626, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555991 (regressionFit = 47,555987, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,769692 (regressionFit = 45,769689, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), director(C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,352362 (regressionFit = 48,352359, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555991 (regressionFit = 47,555987, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,941464 (regressionFit = 47,941461, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.555989670843225
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -47,663629 (regressionFit = 47,663626, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555991 (regressionFit = 47,555987, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,769692 (regressionFit = 45,769689, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), actor(B), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,352362 (regressionFit = 48,352359, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555991 (regressionFit = 47,555987, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,941464 (regressionFit = 47,941461, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.555989680843226
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 14 variant children.  Sending 27 items to OPEN for evaluation and possible insertion.
% Have created 27 valid-on-seeds descendants.
%     Score = -47,663629 (regressionFit = 47,663626, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555991 (regressionFit = 47,555987, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555991 (regressionFit = 47,555987, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555991 (regressionFit = 47,555987, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,769692 (regressionFit = 45,769689, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), workedunder(B, _), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,769692 (regressionFit = 45,769689, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, _), workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.350000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,352362 (regressionFit = 48,352359, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -48,352362 (regressionFit = 48,352359, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(B, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,555991 (regressionFit = 47,555987, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,941464 (regressionFit = 47,941461, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,941464 (regressionFit = 47,941461, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.6636280239174
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,663629 (regressionFit = 47,663626, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), director(B).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,663629 (regressionFit = 47,663626, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), actor(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,026312 (regressionFit = 47,026309, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- female(B), workedunder(B, C), recursive_movie(A, C).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,738268 (regressionFit = 47,738264, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), genre(B, _).  [covers 57,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,663629 (regressionFit = 47,663626, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,697000 (regressionFit = 47,696996, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(_, B).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #5 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.2268703289274599 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,77 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon23433), recursive_movie(D, Anon23433))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added 0.2268703289274599 to wgt = 0,2269 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 11 trees is 11,017 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:342 milliseconds
No hidden examples for : movie
Time to build dataset: 361 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #558 as the next seed: movie(anerolio, avannifois)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -46,158449 (regressionFit = 46,158448, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -46,158449): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,224921 (regressionFit = 47,224920, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,224921 (regressionFit = 47,224920, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,391038 (regressionFit = 47,391036, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074638 (regressionFit = 47,074637, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,383875 (regressionFit = 47,383874, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.15844947292877
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,158450 (regressionFit = 46,158448, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,221421 (regressionFit = 47,221419, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.15845047292877
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,221422 (regressionFit = 47,221419, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.07463833614448
%  At # nodes expanded = 4, |OPEN| = 8.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074639 (regressionFit = 47,074637, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074639 (regressionFit = 47,074637, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,761860 (regressionFit = 45,761858, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,761860): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,907051 (regressionFit = 47,907049, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074639 (regressionFit = 47,074637, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,476283 (regressionFit = 47,476281, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.761859890823146
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,734583 (regressionFit = 46,734580, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,761861 (regressionFit = 45,761858, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,761861 (regressionFit = 45,761858, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,295118 (regressionFit = 46,295115, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,761861 (regressionFit = 45,761858, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,846485 (regressionFit = 45,846482, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.07463923614448
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -47,221422 (regressionFit = 47,221419, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074640 (regressionFit = 47,074637, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,761861 (regressionFit = 45,761858, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), director(C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,907052 (regressionFit = 47,907049, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074640 (regressionFit = 47,074637, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,476284 (regressionFit = 47,476281, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.07463933614448
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -47,221422 (regressionFit = 47,221419, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074640 (regressionFit = 47,074637, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,761861 (regressionFit = 45,761858, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), actor(B), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,907052 (regressionFit = 47,907049, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074640 (regressionFit = 47,074637, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,476284 (regressionFit = 47,476281, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(A), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=2] 'movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.07463934614448
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 14 variant children.  Sending 27 items to OPEN for evaluation and possible insertion.
% Have created 27 valid-on-seeds descendants.
%     Score = -47,221422 (regressionFit = 47,221419, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), female(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074640 (regressionFit = 47,074637, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074640 (regressionFit = 47,074637, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074640 (regressionFit = 47,074637, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,761861 (regressionFit = 45,761858, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), workedunder(B, _), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,761861 (regressionFit = 45,761858, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, _), workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.350000000000001E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,907052 (regressionFit = 47,907049, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,907052 (regressionFit = 47,907049, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(B, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9400000000000002E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,074640 (regressionFit = 47,074637, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,476284 (regressionFit = 47,476281, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(A, _), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,476284 (regressionFit = 47,476281, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.22142134103526
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,221422 (regressionFit = 47,221419, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), director(B).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,221422 (regressionFit = 47,221419, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), actor(A).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1300000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,734583 (regressionFit = 46,734580, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- female(B), workedunder(B, C), recursive_movie(A, C).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.3400000000000006E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,299120 (regressionFit = 47,299117, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), genre(B, _).  [covers 57,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.130000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,221422 (regressionFit = 47,221419, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.240000000000001E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,257277 (regressionFit = 47,257274, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- female(A), workedunder(A, B), workedunder(_, B).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #6 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.1898752590789119 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,76 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon25287), recursive_movie(D, Anon25287))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added 0.1898752590789119 to wgt = 0,1899 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 12 trees is 11,729 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:253 milliseconds
No hidden examples for : movie
Time to build dataset: 267 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #1.225 as the next seed: movie(alegendazapaisiy, aludwigbriand)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,858992 (regressionFit = 45,858991, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,858992): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,930109 (regressionFit = 46,930108, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,930109 (regressionFit = 46,930108, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,095474 (regressionFit = 47,095473, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,754410 (regressionFit = 46,754409, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,089063 (regressionFit = 47,089062, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.85899208847801
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,858993 (regressionFit = 45,858991, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,931216 (regressionFit = 46,931213, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.85899308847801
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,931217 (regressionFit = 46,931213, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.754410293573464
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,754411 (regressionFit = 46,754409, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,754411 (regressionFit = 46,754409, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756018 (regressionFit = 45,756016, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,756018): movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,614207 (regressionFit = 47,614204, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,754411 (regressionFit = 46,754409, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,168226 (regressionFit = 47,168224, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.75601761058003
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,545212 (regressionFit = 46,545209, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756019 (regressionFit = 45,756016, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756019 (regressionFit = 45,756016, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,177672 (regressionFit = 46,177669, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756019 (regressionFit = 45,756016, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818202 (regressionFit = 45,818199, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.756018610580035
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,545213 (regressionFit = 46,545209, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756020 (regressionFit = 45,756016, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,177673 (regressionFit = 46,177669, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756020 (regressionFit = 45,756016, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818203 (regressionFit = 45,818199, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.756018610580035
%  At # nodes expanded = 7, |OPEN| = 8.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,545213 (regressionFit = 46,545209, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756020 (regressionFit = 45,756016, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,177673 (regressionFit = 46,177669, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756020 (regressionFit = 45,756016, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818203 (regressionFit = 45,818199, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.756018620580036
%  At # nodes expanded = 8, |OPEN| = 7.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -46,545213 (regressionFit = 46,545209, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756020 (regressionFit = 45,756016, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756020 (regressionFit = 45,756016, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756020 (regressionFit = 45,756016, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756019 (regressionFit = 45,756016, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,177673 (regressionFit = 46,177669, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,177673 (regressionFit = 46,177669, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,756020 (regressionFit = 45,756016, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818203 (regressionFit = 45,818199, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818202 (regressionFit = 45,818199, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.818201555145905
%  At # nodes expanded = 9, |OPEN| = 6.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -49,166786 (regressionFit = 49,166782, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,017919 (regressionFit = 46,017915, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), female(D).  [covers 18,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818203 (regressionFit = 45,818199, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), director(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818203 (regressionFit = 45,818199, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818202 (regressionFit = 45,818199, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), actor(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818202 (regressionFit = 45,818199, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,613975 (regressionFit = 46,613971, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), genre(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(B, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818203 (regressionFit = 45,818199, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,818202 (regressionFit = 45,818199, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,898789 (regressionFit = 45,898785, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(_, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #7 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
Setting 0.1625862991601946 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,76 and has recall=0,02, precision=1,00, and F1=0,03 (using m-estimates).
 // It covers 1,6% of the positive examples, 21 of 1273,
(movie(D, E) :- workedunder(E, Anon27141), recursive_movie(D, Anon27141))

% On cycle #1, the best clause found is:
%      movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 21 positive examples, of which 21 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 1,6% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added 0.1625862991601946 to wgt = 0,1626 (movie(A, B) :- workedunder(B, C), recursive_movie(A, C))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 13 trees is 12,139 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:274 milliseconds
No hidden examples for : movie
Time to build dataset: 291 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #361 as the next seed: movie(aoceanseleven, alloydalan)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,651889 (regressionFit = 45,651888, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,651889): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,726191 (regressionFit = 46,726190, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,726191 (regressionFit = 46,726190, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,890995 (regressionFit = 46,890994, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,530402 (regressionFit = 46,530401, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,885145 (regressionFit = 46,885144, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.65188933513925
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,651890 (regressionFit = 45,651888, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,730717 (regressionFit = 46,730715, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.65189033513925
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,730718 (regressionFit = 46,730715, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.53040197073146
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,530403 (regressionFit = 46,530401, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,530403 (regressionFit = 46,530401, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751665 (regressionFit = 45,751663, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,411522 (regressionFit = 47,411519, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,530403 (regressionFit = 46,530401, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,953632 (regressionFit = 46,953630, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.75166458691103
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,415273 (regressionFit = 46,415270, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751666 (regressionFit = 45,751663, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751666 (regressionFit = 45,751663, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,097140 (regressionFit = 46,097137, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751666 (regressionFit = 45,751663, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799040 (regressionFit = 45,799037, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.75166558691104
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,415274 (regressionFit = 46,415270, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751667 (regressionFit = 45,751663, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,097141 (regressionFit = 46,097137, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751667 (regressionFit = 45,751663, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.75166558691104
%  At # nodes expanded = 7, |OPEN| = 8.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,415274 (regressionFit = 46,415270, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751667 (regressionFit = 45,751663, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,097141 (regressionFit = 46,097137, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751667 (regressionFit = 45,751663, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.75166559691104
%  At # nodes expanded = 8, |OPEN| = 7.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -46,415274 (regressionFit = 46,415270, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751667 (regressionFit = 45,751663, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751666 (regressionFit = 45,751663, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751667 (regressionFit = 45,751663, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751666 (regressionFit = 45,751663, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,097141 (regressionFit = 46,097137, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,097141 (regressionFit = 46,097137, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,751667 (regressionFit = 45,751663, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.79904000424717
%  At # nodes expanded = 9, |OPEN| = 6.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -48,925599 (regressionFit = 48,925595, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,977235 (regressionFit = 45,977231, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), female(D).  [covers 18,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), director(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), actor(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,502656 (regressionFit = 46,502652, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), genre(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(B, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,799041 (regressionFit = 45,799037, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860461 (regressionFit = 45,860457, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(_, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #8 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.035975076963417875 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,65 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added -0.035975076963417875 to wgt = -0,0360 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 14 trees is 12,608 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:333 milliseconds
No hidden examples for : movie
Time to build dataset: 348 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #1.011 as the next seed: movie(aunetunfontsix, aganchoganchev)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,660100 (regressionFit = 45,660099, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,660100): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,833345 (regressionFit = 46,833344, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,833345 (regressionFit = 46,833344, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,999707 (regressionFit = 46,999705, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,636042 (regressionFit = 46,636040, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,992299 (regressionFit = 46,992298, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.6601002209188
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,660101 (regressionFit = 45,660099, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,833940 (regressionFit = 46,833938, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.6601012209188
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,833941 (regressionFit = 46,833938, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.636041705269356
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,636043 (regressionFit = 46,636040, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,636043 (regressionFit = 46,636040, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860280 (regressionFit = 45,860278, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,508215 (regressionFit = 47,508212, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,636043 (regressionFit = 46,636040, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,052301 (regressionFit = 47,052299, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.86028018229684
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,514665 (regressionFit = 46,514662, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860281 (regressionFit = 45,860278, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860281 (regressionFit = 45,860278, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,209918 (regressionFit = 46,209915, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860281 (regressionFit = 45,860278, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908764 (regressionFit = 45,908761, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.860281182296845
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,514666 (regressionFit = 46,514662, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,209919 (regressionFit = 46,209915, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.860281182296845
%  At # nodes expanded = 7, |OPEN| = 8.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,514666 (regressionFit = 46,514662, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,209919 (regressionFit = 46,209915, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.860281192296846
%  At # nodes expanded = 8, |OPEN| = 7.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -46,514666 (regressionFit = 46,514662, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,209919 (regressionFit = 46,209915, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,209919 (regressionFit = 46,209915, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,860282 (regressionFit = 45,860278, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.90876427319277
%  At # nodes expanded = 9, |OPEN| = 6.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -48,977751 (regressionFit = 48,977747, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,082182 (regressionFit = 46,082178, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), female(D).  [covers 18,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), director(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), actor(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,612176 (regressionFit = 46,612172, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), genre(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(B, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,908765 (regressionFit = 45,908761, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,971684 (regressionFit = 45,971680, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(_, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #9 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.03312015346718509 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,66 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added -0.03312015346718509 to wgt = -0,0331 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 15 trees is 13,120 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:275 milliseconds
No hidden examples for : movie
Time to build dataset: 292 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #522 as the next seed: movie(anerolio, accilecassel)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,668143 (regressionFit = 45,668142, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,668143): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,933707 (regressionFit = 46,933706, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,933707 (regressionFit = 46,933706, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,101529 (regressionFit = 47,101528, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,735213 (regressionFit = 46,735212, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,092661 (regressionFit = 47,092660, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.66814273412604
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,668144 (regressionFit = 45,668142, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,930334 (regressionFit = 46,930332, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.66814373412604
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,930335 (regressionFit = 46,930332, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.73521297353623
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,735214 (regressionFit = 46,735212, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,735214 (regressionFit = 46,735212, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961564 (regressionFit = 45,961562, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,599314 (regressionFit = 47,599311, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,735214 (regressionFit = 46,735212, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,145253 (regressionFit = 47,145250, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.961563635379235
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,607354 (regressionFit = 46,607351, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961565 (regressionFit = 45,961562, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961565 (regressionFit = 45,961562, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,315229 (regressionFit = 46,315226, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961565 (regressionFit = 45,961562, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011101 (regressionFit = 46,011098, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.96156463537924
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,607355 (regressionFit = 46,607351, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961566 (regressionFit = 45,961562, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,315230 (regressionFit = 46,315226, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961566 (regressionFit = 45,961562, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.96156463537924
%  At # nodes expanded = 7, |OPEN| = 8.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,607355 (regressionFit = 46,607351, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961566 (regressionFit = 45,961562, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,315230 (regressionFit = 46,315226, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961566 (regressionFit = 45,961562, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.96156464537924
%  At # nodes expanded = 8, |OPEN| = 7.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -46,607355 (regressionFit = 46,607351, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961566 (regressionFit = 45,961562, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961566 (regressionFit = 45,961562, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961566 (regressionFit = 45,961562, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961565 (regressionFit = 45,961562, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,315230 (regressionFit = 46,315226, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,315230 (regressionFit = 46,315226, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,961566 (regressionFit = 45,961562, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.01110106519895
%  At # nodes expanded = 9, |OPEN| = 6.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -49,028611 (regressionFit = 49,028607, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,180108 (regressionFit = 46,180104, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), female(D).  [covers 18,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), director(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), actor(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,714698 (regressionFit = 46,714694, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), genre(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(B, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,011102 (regressionFit = 46,011098, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(D, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,075445 (regressionFit = 46,075441, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(D, C), workedunder(_, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #10 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.03056308043272263 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,67 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added -0.03056308043272263 to wgt = -0,0306 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 16 trees is 13,570 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:311 milliseconds
No hidden examples for : movie
Time to build dataset: 327 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #85 as the next seed: movie(aoceanstwelve, acaitlinoheaney)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,675985 (regressionFit = 45,675984, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,675985): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,027586 (regressionFit = 47,027585, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,027586 (regressionFit = 47,027585, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,196776 (regressionFit = 47,196775, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,828160 (regressionFit = 46,828159, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,186540 (regressionFit = 47,186539, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.67598520669902
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,675986 (regressionFit = 45,675984, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,020272 (regressionFit = 47,020270, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.675986206699015
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,020273 (regressionFit = 47,020270, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.82816032626705
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,828161 (regressionFit = 46,828159, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,828161 (regressionFit = 46,828159, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055924 (regressionFit = 46,055922, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,684948 (regressionFit = 47,684946, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,828161 (regressionFit = 46,828159, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,232622 (regressionFit = 47,232620, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.05592438679148
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,693678 (regressionFit = 46,693675, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055925 (regressionFit = 46,055922, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055925 (regressionFit = 46,055922, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,413472 (regressionFit = 46,413469, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055925 (regressionFit = 46,055922, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,106462 (regressionFit = 46,106459, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.055925386791486
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,693679 (regressionFit = 46,693675, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055926 (regressionFit = 46,055922, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,413473 (regressionFit = 46,413469, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055926 (regressionFit = 46,055922, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,106463 (regressionFit = 46,106459, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.055925386791486
%  At # nodes expanded = 7, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,693679 (regressionFit = 46,693675, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,413473 (regressionFit = 46,413469, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055926 (regressionFit = 46,055922, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,106463 (regressionFit = 46,106459, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.05592539679149
%  At # nodes expanded = 8, |OPEN| = 9.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -46,693679 (regressionFit = 46,693675, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055926 (regressionFit = 46,055922, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055926 (regressionFit = 46,055922, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,413473 (regressionFit = 46,413469, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,413473 (regressionFit = 46,413469, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055926 (regressionFit = 46,055922, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,106463 (regressionFit = 46,106459, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,106463 (regressionFit = 46,106459, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=4] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.05592619679148
%  At # nodes expanded = 9, |OPEN| = 9.  Pruned 14 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants.
%     Score = -46,693680 (regressionFit = 46,693675, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055927 (regressionFit = 46,055922, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055927 (regressionFit = 46,055922, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055927 (regressionFit = 46,055922, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,413474 (regressionFit = 46,413469, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,413474 (regressionFit = 46,413469, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,055927 (regressionFit = 46,055922, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,106464 (regressionFit = 46,106459, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,106464 (regressionFit = 46,106459, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #11 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.028262739418624006 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,68 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added -0.028262739418624006 to wgt = -0,0283 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 17 trees is 14,045 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:337 milliseconds
No hidden examples for : movie
Time to build dataset: 353 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #392 as the next seed: movie(aplayerthe, aindiravarma)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,683605 (regressionFit = 45,683604, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,683605): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,115341 (regressionFit = 47,115340, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,115341 (regressionFit = 47,115340, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,285811 (regressionFit = 47,285809, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,915192 (regressionFit = 46,915191, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,274295 (regressionFit = 47,274294, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.68360510861299
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,683606 (regressionFit = 45,683604, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,104157 (regressionFit = 47,104155, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.683606108612985
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,104158 (regressionFit = 47,104155, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.915191961847555
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,915193 (regressionFit = 46,915191, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,915193 (regressionFit = 46,915191, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143804 (regressionFit = 46,143802, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,765332 (regressionFit = 47,765329, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,915193 (regressionFit = 46,915191, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,314630 (regressionFit = 47,314628, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.14380416056098
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,774025 (regressionFit = 46,774022, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143805 (regressionFit = 46,143802, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143805 (regressionFit = 46,143802, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,505087 (regressionFit = 46,505083, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143805 (regressionFit = 46,143802, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,195292 (regressionFit = 46,195289, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.14380516056099
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,774026 (regressionFit = 46,774022, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143806 (regressionFit = 46,143802, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,505088 (regressionFit = 46,505083, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143806 (regressionFit = 46,143802, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,195293 (regressionFit = 46,195289, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.14380516056099
%  At # nodes expanded = 7, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,774026 (regressionFit = 46,774022, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,505088 (regressionFit = 46,505083, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143806 (regressionFit = 46,143802, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,195293 (regressionFit = 46,195289, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.14380517056099
%  At # nodes expanded = 8, |OPEN| = 9.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -46,774026 (regressionFit = 46,774022, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143806 (regressionFit = 46,143802, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143806 (regressionFit = 46,143802, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,505088 (regressionFit = 46,505083, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,505087 (regressionFit = 46,505083, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143806 (regressionFit = 46,143802, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,195293 (regressionFit = 46,195289, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,195293 (regressionFit = 46,195289, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=4] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.14380597056098
%  At # nodes expanded = 9, |OPEN| = 9.  Pruned 14 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants.
%     Score = -46,774027 (regressionFit = 46,774022, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143807 (regressionFit = 46,143802, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143807 (regressionFit = 46,143802, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143807 (regressionFit = 46,143802, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,505088 (regressionFit = 46,505083, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,505088 (regressionFit = 46,505083, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,143807 (regressionFit = 46,143802, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,195294 (regressionFit = 46,195289, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,195294 (regressionFit = 46,195289, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #12 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.0261851622637379 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,68 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added -0.0261851622637379 to wgt = -0,0262 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 18 trees is 14,546 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:311 milliseconds
No hidden examples for : movie
Time to build dataset: 327 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #550 as the next seed: movie(anerolio, amiguelferrer)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,690987 (regressionFit = 45,690986, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,690987): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,197351 (regressionFit = 47,197350, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,197351 (regressionFit = 47,197350, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,369015 (regressionFit = 47,369014, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,996646 (regressionFit = 46,996644, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,356305 (regressionFit = 47,356304, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.69098692018201
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,690988 (regressionFit = 45,690986, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,182396 (regressionFit = 47,182393, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.69098792018201
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,182397 (regressionFit = 47,182393, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.996645532758585
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,996646 (regressionFit = 46,996644, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,996647 (regressionFit = 46,996644, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225649 (regressionFit = 46,225647, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,840721 (regressionFit = 47,840719, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,996647 (regressionFit = 46,996644, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,391540 (regressionFit = 47,391538, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.225649225659275
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,848793 (regressionFit = 46,848790, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225650 (regressionFit = 46,225647, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225650 (regressionFit = 46,225647, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,590515 (regressionFit = 46,590512, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225650 (regressionFit = 46,225647, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,278038 (regressionFit = 46,278035, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.22565022565928
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,848794 (regressionFit = 46,848790, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225651 (regressionFit = 46,225647, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,590516 (regressionFit = 46,590512, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225651 (regressionFit = 46,225647, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,278039 (regressionFit = 46,278035, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.22565022565928
%  At # nodes expanded = 7, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,848794 (regressionFit = 46,848790, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,590516 (regressionFit = 46,590512, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225651 (regressionFit = 46,225647, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,278039 (regressionFit = 46,278035, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.22565023565928
%  At # nodes expanded = 8, |OPEN| = 9.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -46,848794 (regressionFit = 46,848790, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225651 (regressionFit = 46,225647, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225651 (regressionFit = 46,225647, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,590516 (regressionFit = 46,590512, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,590516 (regressionFit = 46,590512, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225651 (regressionFit = 46,225647, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,278039 (regressionFit = 46,278035, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,278039 (regressionFit = 46,278035, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=4] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.225651035659276
%  At # nodes expanded = 9, |OPEN| = 9.  Pruned 14 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants.
%     Score = -46,848795 (regressionFit = 46,848790, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225652 (regressionFit = 46,225647, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225652 (regressionFit = 46,225647, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225652 (regressionFit = 46,225647, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,590517 (regressionFit = 46,590512, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,590517 (regressionFit = 46,590512, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,225652 (regressionFit = 46,225647, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,278040 (regressionFit = 46,278035, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,278040 (regressionFit = 46,278035, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #13 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.024302048469900625 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,69 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added -0.024302048469900625 to wgt = -0,0243 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Time taken to learn 19 trees is 15,013 seconds.

% Kept 70 of the 70 positive examples.
% Kept 1.203 of the 1.203 negative examples.
% Dataset size: 1.273
Computing probabilities
prob time:304 milliseconds
No hidden examples for : movie
Time to build dataset: 319 milliseconds
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #951 as the next seed: movie(abasicinstinct, agesinecukrowski)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 1.273,0/1.273,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -45,698121 (regressionFit = 45,698119, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -45,698121): movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,273993 (regressionFit = 47,273992, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,273993 (regressionFit = 47,273992, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 1.159,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,446773 (regressionFit = 47,446772, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 76,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,072867 (regressionFit = 47,072866, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,432947 (regressionFit = 47,432946, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 114,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.698120543900785
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -45,698122 (regressionFit = 45,698119, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1200000000000005E-6) for clause:  movie(_, A) :- female(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,255385 (regressionFit = 47,255383, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- female(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- female(A), actor(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]' score=-45.69812154390078
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.12E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,255386 (regressionFit = 47,255383, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(A, _).  [covers 95,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.230000000000001E-6) for clause:  movie(_, A) :- female(A), actor(A), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'movie(_, A) :- workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]' score=-47.07286698513399
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 6 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), female(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), director(A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,072868 (regressionFit = 47,072866, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), director(B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,072868 (regressionFit = 47,072866, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- workedunder(A, _), actor(A).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, B), actor(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301894 (regressionFit = 46,301892, penalties=2.0300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- workedunder(A, _), genre(A, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,911395 (regressionFit = 47,911392, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, B), genre(B, _).  [covers 304,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1300000000000004E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0300000000000005E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,072868 (regressionFit = 47,072866, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(A, _).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.24E-6) for clause:  movie(_, A) :- workedunder(A, _), workedunder(_, A).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -47,463638 (regressionFit = 47,463636, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- workedunder(A, B), workedunder(_, B).  [covers 399,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=2] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.30189422832595
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 6 variant children.  Sending 15 items to OPEN for evaluation and possible insertion.
% Have created 15 valid-on-seeds descendants.
%     Score = -46,918378 (regressionFit = 46,918375, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301895 (regressionFit = 46,301892, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301895 (regressionFit = 46,301892, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.0300000000000006E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,670194 (regressionFit = 46,670191, penalties=3.1400000000000004E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.9300000000000007E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301895 (regressionFit = 46,301892, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,355139 (regressionFit = 46,355136, penalties=3.04E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.301895228325954
%  At # nodes expanded = 6, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,918379 (regressionFit = 46,918375, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301896 (regressionFit = 46,301892, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,670195 (regressionFit = 46,670191, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301896 (regressionFit = 46,301892, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,355140 (regressionFit = 46,355136, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), director(C), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.301895228325954
%  At # nodes expanded = 7, |OPEN| = 9.  Pruned 6 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -46,918379 (regressionFit = 46,918375, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.03E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,670195 (regressionFit = 46,670191, penalties=4.14E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.9300000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301896 (regressionFit = 46,301892, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,355140 (regressionFit = 46,355136, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), actor(B), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=3] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.301895238325955
%  At # nodes expanded = 8, |OPEN| = 9.  Pruned 14 variant children.  Sending 26 items to OPEN for evaluation and possible insertion.
% Have created 26 valid-on-seeds descendants.
%     Score = -46,918379 (regressionFit = 46,918375, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301896 (regressionFit = 46,301892, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.040000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301896 (regressionFit = 46,301892, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,670195 (regressionFit = 46,670191, penalties=4.150000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,670195 (regressionFit = 46,670191, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.94E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.8400000000000005E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301896 (regressionFit = 46,301892, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,355140 (regressionFit = 46,355136, penalties=4.05E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, _), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,355140 (regressionFit = 46,355136, penalties=3.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=4] 'movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]' score=-46.30189603832595
%  At # nodes expanded = 9, |OPEN| = 9.  Pruned 14 variant children.  Sending 25 items to OPEN for evaluation and possible insertion.
% Have created 25 valid-on-seeds descendants.
%     Score = -46,918380 (regressionFit = 46,918375, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(B).  [covers 5,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), female(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301897 (regressionFit = 46,301892, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301897 (regressionFit = 46,301892, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), director(D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301897 (regressionFit = 46,301892, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(B).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), actor(D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(B, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,670196 (regressionFit = 46,670191, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(C, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,670196 (regressionFit = 46,670191, penalties=4.95E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), genre(D, _).  [covers 16,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(B, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, C).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.740000000000001E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, D).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,301897 (regressionFit = 46,301892, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(B, _).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(C, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(D, _).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, B).  [covers 0,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,355141 (regressionFit = 46,355136, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, C).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]
%     Score = -46,355141 (regressionFit = 46,355136, penalties=4.85E-6) for clause:  movie(A, B) :- workedunder(B, C), recursive_movie(A, C), workedunder(B, D), recursive_movie(A, D), workedunder(_, D).  [covers 21,0/1.273,0 pos, 0,0/0,0 neg]

***** Warning: #14 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]

% The best node found: movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
Setting -0.022589635017824652 for 
 // Learned this clause on outer loop cycle #1.  It scores=-45,70 and has recall=0,33, precision=1,00, and F1=0,49 (using m-estimates).
 // It covers 32,8% of the positive examples, 418 of 1273,
(movie(D, E) :- female(E))

% On cycle #1, the best clause found is:
%      movie(_, A) :- female(A).  [covers 418,0/1.273,0 pos, 0,0/0,0 neg]
% This clause covers 418 positive examples, of which 418 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 32,8% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added -0.022589635017824652 to wgt = -0,0226 (movie(_, A) :- female(A))
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model.ckpt
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for movie.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).
stepLength_tree11(1.0).
stepLength_tree12(1.0).
stepLength_tree13(1.0).
stepLength_tree14(1.0).
stepLength_tree15(1.0).
stepLength_tree16(1.0).
stepLength_tree17(1.0).
stepLength_tree18(1.0).
stepLength_tree19(1.0).
stepLength_tree20(1.0).

logPrior(-1.8).
movie(D, E, Total) :- // A general accessor. 
   movie(D, E, 1000000, Total), !.
movie(D, E, Total) :- waitHere("This should not fail", movie(D, E, Total)).

movie(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_movie_tree1(D, E, TreesToUse, Total1),
   getScore_movie_tree2(D, E, TreesToUse, Total2),
   getScore_movie_tree3(D, E, TreesToUse, Total3),
   getScore_movie_tree4(D, E, TreesToUse, Total4),
   getScore_movie_tree5(D, E, TreesToUse, Total5),
   getScore_movie_tree6(D, E, TreesToUse, Total6),
   getScore_movie_tree7(D, E, TreesToUse, Total7),
   getScore_movie_tree8(D, E, TreesToUse, Total8),
   getScore_movie_tree9(D, E, TreesToUse, Total9),
   getScore_movie_tree10(D, E, TreesToUse, Total10),
   getScore_movie_tree11(D, E, TreesToUse, Total11),
   getScore_movie_tree12(D, E, TreesToUse, Total12),
   getScore_movie_tree13(D, E, TreesToUse, Total13),
   getScore_movie_tree14(D, E, TreesToUse, Total14),
   getScore_movie_tree15(D, E, TreesToUse, Total15),
   getScore_movie_tree16(D, E, TreesToUse, Total16),
   getScore_movie_tree17(D, E, TreesToUse, Total17),
   getScore_movie_tree18(D, E, TreesToUse, Total18),
   getScore_movie_tree19(D, E, TreesToUse, Total19),
   getScore_movie_tree20(D, E, TreesToUse, Total20),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10 + Total11 + Total12 + Total13 + Total14 + Total15 + Total16 + Total17 + Total18 + Total19 + Total20,
   !.
movie(D, E, TreesToUse, Total) :- waitHere("This should not fail", movie(D, E, TreesToUse, Total)).

getScore_movie_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_movie_tree1(D, E, TreesToUse, Total1) :- movie_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_movie_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_movie_tree2(D, E, TreesToUse, Total2) :- movie_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_movie_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_movie_tree3(D, E, TreesToUse, Total3) :- movie_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_movie_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_movie_tree4(D, E, TreesToUse, Total4) :- movie_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_movie_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_movie_tree5(D, E, TreesToUse, Total5) :- movie_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_movie_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_movie_tree6(D, E, TreesToUse, Total6) :- movie_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_movie_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_movie_tree7(D, E, TreesToUse, Total7) :- movie_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_movie_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_movie_tree8(D, E, TreesToUse, Total8) :- movie_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_movie_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_movie_tree9(D, E, TreesToUse, Total9) :- movie_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_movie_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_movie_tree10(D, E, TreesToUse, Total10) :- movie_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

getScore_movie_tree11(D, E, TreesToUse, 0.0) :- 11 > TreesToUse, !.
getScore_movie_tree11(D, E, TreesToUse, Total11) :- movie_tree11(D, E, Total), stepLength_tree11(StepLen), Total11 is Total * StepLen.

getScore_movie_tree12(D, E, TreesToUse, 0.0) :- 12 > TreesToUse, !.
getScore_movie_tree12(D, E, TreesToUse, Total12) :- movie_tree12(D, E, Total), stepLength_tree12(StepLen), Total12 is Total * StepLen.

getScore_movie_tree13(D, E, TreesToUse, 0.0) :- 13 > TreesToUse, !.
getScore_movie_tree13(D, E, TreesToUse, Total13) :- movie_tree13(D, E, Total), stepLength_tree13(StepLen), Total13 is Total * StepLen.

getScore_movie_tree14(D, E, TreesToUse, 0.0) :- 14 > TreesToUse, !.
getScore_movie_tree14(D, E, TreesToUse, Total14) :- movie_tree14(D, E, Total), stepLength_tree14(StepLen), Total14 is Total * StepLen.

getScore_movie_tree15(D, E, TreesToUse, 0.0) :- 15 > TreesToUse, !.
getScore_movie_tree15(D, E, TreesToUse, Total15) :- movie_tree15(D, E, Total), stepLength_tree15(StepLen), Total15 is Total * StepLen.

getScore_movie_tree16(D, E, TreesToUse, 0.0) :- 16 > TreesToUse, !.
getScore_movie_tree16(D, E, TreesToUse, Total16) :- movie_tree16(D, E, Total), stepLength_tree16(StepLen), Total16 is Total * StepLen.

getScore_movie_tree17(D, E, TreesToUse, 0.0) :- 17 > TreesToUse, !.
getScore_movie_tree17(D, E, TreesToUse, Total17) :- movie_tree17(D, E, Total), stepLength_tree17(StepLen), Total17 is Total * StepLen.

getScore_movie_tree18(D, E, TreesToUse, 0.0) :- 18 > TreesToUse, !.
getScore_movie_tree18(D, E, TreesToUse, Total18) :- movie_tree18(D, E, Total), stepLength_tree18(StepLen), Total18 is Total * StepLen.

getScore_movie_tree19(D, E, TreesToUse, 0.0) :- 19 > TreesToUse, !.
getScore_movie_tree19(D, E, TreesToUse, Total19) :- movie_tree19(D, E, Total), stepLength_tree19(StepLen), Total19 is Total * StepLen.

getScore_movie_tree20(D, E, TreesToUse, 0.0) :- 20 > TreesToUse, !.
getScore_movie_tree20(D, E, TreesToUse, Total20) :- movie_tree20(D, E, Total), stepLength_tree20(StepLen), Total20 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(0, []).
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Have selected pos example #15.745 as the next seed: movie(asaramay, abrionjames)
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = movie(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  movie(_, _).  [covers 25.460,0/25.460,0 pos, 0,0/0,0 neg]
% Most-general root: movie(_, _).  [covers 25.460,0/25.460,0 pos, 0,0/0,0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'movie(_, _).  [covers 25.460,0/25.460,0 pos, 0,0/0,0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -174.510,376341 (regressionFit = 174.510,376340, penalties=1.12E-6) for clause:  movie(_, A) :- female(A).  [covers 8.360,0/25.460,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -174.510,376341): movie(_, A) :- female(A).  [covers 8.360,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -50.953,638120 (regressionFit = 50.953,638118, penalties=1.12E-6) for clause:  movie(_, A) :- director(A).  [covers 2.280,0/25.460,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -50.953,638120): movie(_, A) :- director(A).  [covers 2.280,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -379.681,574077 (regressionFit = 379.681,574076, penalties=1.12E-6) for clause:  movie(_, A) :- actor(A).  [covers 23.180,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -40.523,124271 (regressionFit = 40.523,124270, penalties=1.23E-6) for clause:  movie(_, A) :- genre(A, _).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -40.523,124271): movie(_, A) :- genre(A, _).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.12E-6) for clause:  movie(_, A) :- workedunder(A, A).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -73.068,170864 (regressionFit = 73.068,170863, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(A, _).  [covers 7.980,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -52.264,904384 (regressionFit = 52.264,904383, penalties=1.23E-6) for clause:  movie(_, A) :- workedunder(_, A).  [covers 2.280,0/25.460,0 pos, 0,0/0,0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'movie(_, A) :- genre(A, _).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]' score=-40523.124270884204
%  At # nodes expanded = 2, |OPEN| = 6.  Pruned 2 variant children.  Sending 8 items to OPEN for evaluation and possible insertion.
% Have created 8 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), female(A).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -40.523,124272 (regressionFit = 40.523,124270, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), director(A).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), actor(A).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -41.997,774311 (regressionFit = 41.997,774309, penalties=2.24E-6) for clause:  movie(_, A) :- genre(A, _), genre(A, _).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -40.251,264541 (regressionFit = 40.251,264539, penalties=2.1400000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -40.251,264541): movie(_, A) :- genre(A, B), genre(_, B).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2300000000000002E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, A).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(A, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -41.313,575409 (regressionFit = 41.313,575406, penalties=2.3400000000000005E-6) for clause:  movie(_, A) :- genre(A, _), workedunder(_, A).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=2] 'movie(_, A) :- genre(A, B), genre(_, B).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]' score=-40251.264540870514
%  At # nodes expanded = 3, |OPEN| = 9.  Pruned 8 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B), female(A).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), female(C).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -40.251,264542 (regressionFit = 40.251,264539, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B), director(A).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -40.251,264542 (regressionFit = 40.251,264539, penalties=3.04E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), director(C).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B), actor(A).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), actor(C).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -25.167,655529 (regressionFit = 25.167,655526, penalties=2.9400000000000007E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
% Gleaner: New best node found (score = -25.167,655529): movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -41.500,390081 (regressionFit = 41.500,390078, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B), genre(A, _).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -41.255,951701 (regressionFit = 41.255,951698, penalties=3.0500000000000004E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), genre(C, _).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -40.676,961239 (regressionFit = 40.676,961235, penalties=3.1500000000000003E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B), genre(_, B).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1400000000000013E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B), workedunder(A, A).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), workedunder(A, C).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), workedunder(C, A).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.04E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), workedunder(C, C).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B), workedunder(A, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1500000000000008E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), workedunder(C, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -40.634,519629 (regressionFit = 40.634,519626, penalties=3.2500000000000006E-6) for clause:  movie(_, A) :- genre(A, B), genre(_, B), workedunder(_, A).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -40.528,150891 (regressionFit = 40.528,150888, penalties=3.1500000000000008E-6) for clause:  movie(_, A) :- genre(A, B), genre(C, B), workedunder(_, C).  [covers 1.520,0/25.460,0 pos, 0,0/0,0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=3] 'movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]' score=-25167.655528910018
%  At # nodes expanded = 4, |OPEN| = 9.  Pruned 8 variant children.  Sending 17 items to OPEN for evaluation and possible insertion.
% Have created 17 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), female(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), female(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -25.167,655530 (regressionFit = 25.167,655526, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -25.167,655530 (regressionFit = 25.167,655526, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), actor(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), actor(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794848 (regressionFit = 27.254,794844, penalties=3.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794848 (regressionFit = 27.254,794844, penalties=3.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.151,435877 (regressionFit = 26.151,435873, penalties=3.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), workedunder(B, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), workedunder(B, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), workedunder(D, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), workedunder(D, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), workedunder(B, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.05E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), workedunder(D, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.407,850225 (regressionFit = 27.407,850221, penalties=4.05E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), workedunder(_, B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.407,850225 (regressionFit = 27.407,850221, penalties=4.05E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), workedunder(_, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]

% Consider expanding [#5 of outerLoop #1, bodyLen=4] 'movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]' score=-25167.65552991002
%  At # nodes expanded = 5, |OPEN| = 9.  Pruned 8 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), female(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), female(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -25.167,655531 (regressionFit = 25.167,655526, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), director(D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), actor(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), actor(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794849 (regressionFit = 27.254,794844, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), genre(B, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794849 (regressionFit = 27.254,794844, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), genre(D, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.151,435878 (regressionFit = 26.151,435873, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), genre(_, C).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), workedunder(B, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), workedunder(B, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), workedunder(D, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), workedunder(D, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.050000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), workedunder(B, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.050000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), workedunder(D, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.407,850226 (regressionFit = 27.407,850221, penalties=5.050000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), workedunder(_, B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.407,850226 (regressionFit = 27.407,850221, penalties=5.050000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(B), workedunder(_, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]

% Consider expanding [#6 of outerLoop #1, bodyLen=4] 'movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]' score=-25167.65552991002
%  At # nodes expanded = 6, |OPEN| = 8.  Pruned 8 variant children.  Sending 16 items to OPEN for evaluation and possible insertion.
% Have created 16 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), female(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), female(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -25.167,655531 (regressionFit = 25.167,655526, penalties=4.840000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), director(B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), actor(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), actor(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794849 (regressionFit = 27.254,794844, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), genre(B, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794849 (regressionFit = 27.254,794844, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), genre(D, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.151,435878 (regressionFit = 26.151,435873, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), genre(_, C).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), workedunder(B, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), workedunder(B, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), workedunder(D, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.940000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), workedunder(D, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.050000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), workedunder(B, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.050000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), workedunder(D, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.407,850226 (regressionFit = 27.407,850221, penalties=5.050000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), workedunder(_, B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.407,850226 (regressionFit = 27.407,850221, penalties=5.050000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), director(D), workedunder(_, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]

% Consider expanding [#7 of outerLoop #1, bodyLen=4] 'movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]' score=-26151.435876520867
%  At # nodes expanded = 7, |OPEN| = 7.  Pruned 18 variant children.  Sending 29 items to OPEN for evaluation and possible insertion.
% Have created 29 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), female(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), female(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), female(E).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.151,435878 (regressionFit = 26.151,435873, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), director(B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.151,435878 (regressionFit = 26.151,435873, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), director(D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.151,435877 (regressionFit = 26.151,435873, penalties=4.85E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), director(E).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), actor(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), actor(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), actor(E).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -25.167,655531 (regressionFit = 25.167,655526, penalties=4.75E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), recursive_movie(A, E).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.894,931078 (regressionFit = 26.894,931073, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), genre(B, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.894,931078 (regressionFit = 26.894,931073, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), genre(D, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.664,388223 (regressionFit = 26.664,388219, penalties=4.860000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), genre(E, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -28.050,623321 (regressionFit = 28.050,623316, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), genre(_, C).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), workedunder(B, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), workedunder(B, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), workedunder(B, E).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), workedunder(D, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), workedunder(D, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), workedunder(D, E).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), workedunder(E, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), workedunder(E, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.85E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), workedunder(E, E).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), workedunder(B, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), workedunder(D, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.96E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), workedunder(E, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.249,549183 (regressionFit = 27.249,549178, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), workedunder(_, B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.249,549183 (regressionFit = 27.249,549178, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(_, C), workedunder(_, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.308,669699 (regressionFit = 26.308,669694, penalties=4.96E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(E, C), workedunder(_, E).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]

% Consider expanding [#8 of outerLoop #1, bodyLen=4] 'movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]' score=-27254.79484816271
% [ LazyGroundClauseIndex ]  Building full index for genre/2 with 7 assertions.
%  At # nodes expanded = 8, |OPEN| = 6.  Pruned 10 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), female(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), female(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794849 (regressionFit = 27.254,794844, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), director(B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794849 (regressionFit = 27.254,794844, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), director(D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), actor(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), actor(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.831,305373 (regressionFit = 26.831,305369, penalties=4.75E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, E), genre(D, E).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -28.826,888011 (regressionFit = 28.826,888006, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), genre(B, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -28.699,659807 (regressionFit = 28.699,659802, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), genre(D, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.894,931078 (regressionFit = 26.894,931073, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), genre(_, C).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.320,521660 (regressionFit = 26.320,521656, penalties=4.860000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, E), genre(_, E).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), workedunder(B, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), workedunder(B, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), workedunder(D, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), workedunder(D, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), workedunder(B, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), workedunder(D, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -29.434,225868 (regressionFit = 29.434,225863, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), workedunder(_, B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -29.646,378790 (regressionFit = 29.646,378785, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(B, _), workedunder(_, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]

% Consider expanding [#9 of outerLoop #1, bodyLen=4] 'movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]' score=-27254.79484816271
%  At # nodes expanded = 9, |OPEN| = 5.  Pruned 10 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), female(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), female(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794849 (regressionFit = 27.254,794844, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), director(B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -27.254,794849 (regressionFit = 27.254,794844, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), director(D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), actor(B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), actor(D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.831,305373 (regressionFit = 26.831,305369, penalties=4.75E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, E), genre(B, E).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -28.699,659807 (regressionFit = 28.699,659802, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), genre(B, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -28.826,888011 (regressionFit = 28.826,888006, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), genre(D, _).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.894,931078 (regressionFit = 26.894,931073, penalties=4.960000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), genre(_, C).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -26.320,521660 (regressionFit = 26.320,521656, penalties=4.860000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, E), genre(_, E).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), workedunder(B, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), workedunder(B, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), workedunder(D, B).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.95E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), workedunder(D, D).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), workedunder(B, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), workedunder(D, _).  [covers 0,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -29.646,378790 (regressionFit = 29.646,378785, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), workedunder(_, B).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
%     Score = -29.434,225868 (regressionFit = 29.434,225863, penalties=5.060000000000001E-6) for clause:  movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D), genre(D, _), workedunder(_, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]

***** Warning: #15 TOO MANY NODES CONSIDERED (i.e., 'expanded') for 'LearnOneClause': nodesConsidered = 10 and maxNodesToConsider = 10. *****


% The best node found: movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]

% The best node found: movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
Setting 5.1673452709966545 for 
 // Learned this clause on outer loop cycle #1.  It scores=-25.167,66 and has recall=0,0047, precision=1,00, and F1=0,0094 (using m-estimates).
 // It covers 0,5% of the positive examples, 120 of 25460 (of which 6 are newly covered),
(movie(D, E) :- genre(E, Anon43371), genre(Anon43469, Anon43371), recursive_movie(D, Anon43469))

% On cycle #1, the best clause found is:
%      movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D).  [covers 120,0/25.460,0 pos, 0,0/0,0 neg]
% This clause covers 120 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.
% The current set of 1 best clauses covers 0,02% of the positive examples and NaN% of the negatives.}

% ******************************************

% Have stopped ILP's outer loop because have reached the maximum number of iterations (1).

% ******************************************
adding regression values
Added 5.1673452709966545 to wgt = 5,1673 (movie(A, B) :- genre(B, C), genre(D, C), recursive_movie(A, D))
% Time taken to learn model for 'movie': 16,789 seconds.
% Saving model in: datasets\sample-imdb\train/models/bRDNs/movie.model
cached groundings hit: 0
Misses: 0

% Switching to standard-logic notation for variables; previous setting = uppercase

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Total learning time (20 trees): 17,490 seconds.
